{
  "numFailedTestSuites": 0,
  "numFailedTests": 0,
  "numPassedTestSuites": 80,
  "numPassedTests": 764,
  "numPendingTestSuites": 0,
  "numPendingTests": 23,
  "numRuntimeErrorTestSuites": 0,
  "numTodoTests": 0,
  "numTotalTestSuites": 80,
  "numTotalTests": 787,
  "openHandles": [],
  "snapshot": {
    "added": 0,
    "didUpdate": false,
    "failure": false,
    "filesAdded": 0,
    "filesRemoved": 0,
    "filesRemovedList": [],
    "filesUnmatched": 0,
    "filesUpdated": 0,
    "matched": 0,
    "total": 0,
    "unchecked": 0,
    "uncheckedKeysByFile": [],
    "unmatched": 0,
    "updated": 0
  },
  "startTime": 1728536892813,
  "success": true,
  "testResults": [
    {
      "assertionResults": [
        {
          "ancestorTitles": ["getSyncChanges"],
          "duration": 11,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "getSyncChanges returns null for from==to",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "returns null for from==to"
        },
        {
          "ancestorTitles": ["getSyncChanges"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "getSyncChanges returns empty changes for empty steps",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "returns empty changes for empty steps"
        },
        {
          "ancestorTitles": ["getSyncChanges"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "getSyncChanges returns created tables",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "returns created tables"
        },
        {
          "ancestorTitles": ["getSyncChanges"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "getSyncChanges returns added columns",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "returns added columns"
        },
        {
          "ancestorTitles": ["getSyncChanges"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "getSyncChanges combines added columns from multiple migration steps",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "combines added columns from multiple migration steps"
        },
        {
          "ancestorTitles": ["getSyncChanges"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "getSyncChanges skips added columns for a table if it is also added",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "skips added columns for a table if it is also added"
        },
        {
          "ancestorTitles": ["getSyncChanges"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "getSyncChanges skips added tables if subsequently destroyed",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "skips added tables if subsequently destroyed"
        },
        {
          "ancestorTitles": ["getSyncChanges"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "getSyncChanges skips added columns if subsequently destroyed",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "skips added columns if subsequently destroyed"
        },
        {
          "ancestorTitles": ["getSyncChanges"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "getSyncChanges skips added columns if parent table subsequently destroyed",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "skips added columns if parent table subsequently destroyed"
        },
        {
          "ancestorTitles": ["getSyncChanges"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "getSyncChanges renames added columns if needed",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "renames added columns if needed"
        },
        {
          "ancestorTitles": ["getSyncChanges"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "getSyncChanges skips added columns if subsequently destroyed, after renaming",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "skips added columns if subsequently destroyed, after renaming"
        },
        {
          "ancestorTitles": ["getSyncChanges"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "getSyncChanges skips duplicates",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "skips duplicates"
        },
        {
          "ancestorTitles": ["getSyncChanges"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "getSyncChanges can handle a complex migration steps list",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "can handle a complex migration steps list"
        },
        {
          "ancestorTitles": ["getSyncChanges"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "getSyncChanges returns only the necessary range of migrations",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "returns only the necessary range of migrations"
        },
        {
          "ancestorTitles": ["getSyncChanges"],
          "duration": 27,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "getSyncChanges fails on incorrect migrations",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "fails on incorrect migrations"
        },
        {
          "ancestorTitles": ["getSyncChanges"],
          "duration": 7,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "getSyncChanges fails early on unknown migration steps",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 6,
          "retryReasons": [],
          "status": "passed",
          "title": "fails early on unknown migration steps"
        }
      ],
      "endTime": 1728536897223,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\Schema\\migrations\\getSyncChanges\\test.js",
      "startTime": 1728536893203,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["buildQueryDescription"],
          "duration": 11,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "buildQueryDescription builds empty query",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "builds empty query"
        },
        {
          "ancestorTitles": ["buildQueryDescription"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "buildQueryDescription builds simple query",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "builds simple query"
        },
        {
          "ancestorTitles": ["buildQueryDescription"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "buildQueryDescription accepts multiple conditions and value types",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "accepts multiple conditions and value types"
        },
        {
          "ancestorTitles": ["buildQueryDescription"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "buildQueryDescription supports multiple operators",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "supports multiple operators"
        },
        {
          "ancestorTitles": ["buildQueryDescription"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "buildQueryDescription supports column comparisons",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "supports column comparisons"
        },
        {
          "ancestorTitles": ["buildQueryDescription"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "buildQueryDescription supports AND/OR nesting",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "supports AND/OR nesting"
        },
        {
          "ancestorTitles": ["buildQueryDescription"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "buildQueryDescription supports unsafe SQL and Loki expressions",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "supports unsafe SQL and Loki expressions"
        },
        {
          "ancestorTitles": ["buildQueryDescription"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "buildQueryDescription supports unsafe Loki transform",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "supports unsafe Loki transform"
        },
        {
          "ancestorTitles": ["buildQueryDescription"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "buildQueryDescription supports unsafe SQL queries",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "supports unsafe SQL queries"
        },
        {
          "ancestorTitles": ["buildQueryDescription"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "buildQueryDescription supports unsafe SQL queries with placeholder values",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "supports unsafe SQL queries with placeholder values"
        },
        {
          "ancestorTitles": ["buildQueryDescription"],
          "duration": 33,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "buildQueryDescription prevents use of unsafe sql queries with other clauses",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "prevents use of unsafe sql queries with other clauses"
        },
        {
          "ancestorTitles": ["buildQueryDescription"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "buildQueryDescription allows unsafe SQL queries to be properly observable",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "allows unsafe SQL queries to be properly observable"
        },
        {
          "ancestorTitles": ["buildQueryDescription"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "buildQueryDescription supports simple JOIN queries",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "supports simple JOIN queries"
        },
        {
          "ancestorTitles": ["buildQueryDescription"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "buildQueryDescription supports nesting Q.on inside and/or",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "supports nesting Q.on inside and/or"
        },
        {
          "ancestorTitles": ["buildQueryDescription"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "buildQueryDescription supports multiple conditions on Q.on",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "supports multiple conditions on Q.on"
        },
        {
          "ancestorTitles": ["buildQueryDescription"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "buildQueryDescription supports deep nesting Q.on inside Q.on",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "supports deep nesting Q.on inside Q.on"
        },
        {
          "ancestorTitles": ["buildQueryDescription"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "buildQueryDescription supports Q.on shortcut syntaxes",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "supports Q.on shortcut syntaxes"
        },
        {
          "ancestorTitles": ["buildQueryDescription"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "buildQueryDescription supports passing conditions as array or via spread",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "supports passing conditions as array or via spread"
        },
        {
          "ancestorTitles": ["buildQueryDescription"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "buildQueryDescription supports sorting query",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "supports sorting query"
        },
        {
          "ancestorTitles": ["buildQueryDescription"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "buildQueryDescription does not support skip operator without take operator",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "does not support skip operator without take operator"
        },
        {
          "ancestorTitles": ["buildQueryDescription"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "buildQueryDescription support multiple skip operators but only take the last",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "support multiple skip operators but only take the last"
        },
        {
          "ancestorTitles": ["buildQueryDescription"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "buildQueryDescription deep freezes the query in dev",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "deep freezes the query in dev"
        },
        {
          "ancestorTitles": ["buildQueryDescription"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "buildQueryDescription freezes oneOf/notIn, even in production",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "freezes oneOf/notIn, even in production"
        },
        {
          "ancestorTitles": ["buildQueryDescription"],
          "duration": 20,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "buildQueryDescription catches bad types",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 19,
          "retryReasons": [],
          "status": "passed",
          "title": "catches bad types"
        },
        {
          "ancestorTitles": ["buildQueryDescription"],
          "duration": 6,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "buildQueryDescription catches bad argument values",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 9,
          "retryReasons": [],
          "status": "passed",
          "title": "catches bad argument values"
        },
        {
          "ancestorTitles": ["buildQueryDescription"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "buildQueryDescription protect against passing Watermelon look-alike objects",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 5,
          "retryReasons": [],
          "status": "passed",
          "title": "protect against passing Watermelon look-alike objects"
        },
        {
          "ancestorTitles": ["buildQueryDescription"],
          "duration": 7,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "buildQueryDescription protects against unsafe column and table names passed",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 9,
          "retryReasons": [],
          "status": "passed",
          "title": "protects against unsafe column and table names passed"
        }
      ],
      "endTime": 1728536897254,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\QueryDescription\\__tests__\\test.js",
      "startTime": 1728536893161,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["schemaMigrations()"],
          "duration": 13,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "schemaMigrations() returns a basic schema migrations spec",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "returns a basic schema migrations spec"
        },
        {
          "ancestorTitles": ["schemaMigrations()"],
          "duration": 8,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "schemaMigrations() returns a complex schema migrations spec",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "returns a complex schema migrations spec"
        },
        {
          "ancestorTitles": ["schemaMigrations()"],
          "duration": 23,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "schemaMigrations() throws if migration spec is malformed",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "throws if migration spec is malformed"
        },
        {
          "ancestorTitles": ["schemaMigrations()"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "schemaMigrations() throws if there are gaps or duplicates in migrations",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "throws if there are gaps or duplicates in migrations"
        },
        {
          "ancestorTitles": ["migration step functions"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "migration step functions throws if createTable() is malformed",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "throws if createTable() is malformed"
        },
        {
          "ancestorTitles": ["migration step functions"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "migration step functions throws if addColumns() is malformed",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "throws if addColumns() is malformed"
        },
        {
          "ancestorTitles": ["migration step functions"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "migration step functions throws if destroyColumn() is malformed",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "throws if destroyColumn() is malformed"
        },
        {
          "ancestorTitles": ["migration step functions"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "migration step functions throws if renameColumn() is malformed",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "throws if renameColumn() is malformed"
        },
        {
          "ancestorTitles": ["migration step functions"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "migration step functions throws if destroyTable() is malformed",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "throws if destroyTable() is malformed"
        },
        {
          "ancestorTitles": ["migration step functions"],
          "duration": 77,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "migration step functions does not allow unsafe names",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 64,
          "retryReasons": [],
          "status": "passed",
          "title": "does not allow unsafe names"
        },
        {
          "ancestorTitles": ["stepsForMigration"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "stepsForMigration finds the right migration steps",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 12,
          "retryReasons": [],
          "status": "passed",
          "title": "finds the right migration steps"
        }
      ],
      "endTime": 1728536897276,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\Schema\\migrations\\test.js",
      "startTime": 1728536893170,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["LokiJS encodeQuery"],
          "duration": 12,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJS encodeQuery encodes simple queries",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "encodes simple queries"
        },
        {
          "ancestorTitles": ["LokiJS encodeQuery"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJS encodeQuery encodes a single condition",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "encodes a single condition"
        },
        {
          "ancestorTitles": ["LokiJS encodeQuery"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJS encodeQuery encodes multiple conditions and value types",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "encodes multiple conditions and value types"
        },
        {
          "ancestorTitles": ["LokiJS encodeQuery"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJS encodeQuery encodes multiple operators",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "encodes multiple operators"
        },
        {
          "ancestorTitles": ["LokiJS encodeQuery"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJS encodeQuery encodes column comparisons",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "encodes column comparisons"
        },
        {
          "ancestorTitles": ["LokiJS encodeQuery"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJS encodeQuery encodes AND/OR nesting",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "encodes AND/OR nesting"
        },
        {
          "ancestorTitles": ["LokiJS encodeQuery"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJS encodeQuery encodes JOIN queries",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "encodes JOIN queries"
        },
        {
          "ancestorTitles": ["LokiJS encodeQuery"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJS encodeQuery encodes on()s nested inside AND/ORs",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "encodes on()s nested inside AND/ORs"
        },
        {
          "ancestorTitles": ["LokiJS encodeQuery"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJS encodeQuery encodes Q.on nested inside Q.on",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "encodes Q.on nested inside Q.on"
        },
        {
          "ancestorTitles": ["LokiJS encodeQuery"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJS encodeQuery encodes multiple conditions on Q.on",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "encodes multiple conditions on Q.on"
        },
        {
          "ancestorTitles": ["LokiJS encodeQuery"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJS encodeQuery encodes unsafe loki subexpressions",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "encodes unsafe loki subexpressions"
        },
        {
          "ancestorTitles": ["LokiJS encodeQuery"],
          "duration": 27,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJS encodeQuery fails to encode nested on without explicit joinTables",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "fails to encode nested on without explicit joinTables"
        },
        {
          "ancestorTitles": ["LokiJS encodeQuery"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJS encodeQuery throws an error on unsupported query clauses",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "throws an error on unsupported query clauses"
        }
      ],
      "endTime": 1728536897822,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\adapters\\lokijs\\worker\\encodeQuery\\test.js",
      "startTime": 1728536893148,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["SQLite encodeQuery"],
          "duration": 11,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeQuery encodes simple queries",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "encodes simple queries"
        },
        {
          "ancestorTitles": ["SQLite encodeQuery"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeQuery encodes multiple conditions and value types",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "encodes multiple conditions and value types"
        },
        {
          "ancestorTitles": ["SQLite encodeQuery"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeQuery encodes multiple operators",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "encodes multiple operators"
        },
        {
          "ancestorTitles": ["SQLite encodeQuery"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeQuery encodes column comparisons",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "encodes column comparisons"
        },
        {
          "ancestorTitles": ["SQLite encodeQuery"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeQuery encodes raw SQL expressions",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "encodes raw SQL expressions"
        },
        {
          "ancestorTitles": ["SQLite encodeQuery"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeQuery encodes AND/OR nesting",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "encodes AND/OR nesting"
        },
        {
          "ancestorTitles": ["SQLite encodeQuery"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeQuery encodes count queries",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "encodes count queries"
        },
        {
          "ancestorTitles": ["SQLite encodeQuery"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeQuery encodes JOIN queries",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "encodes JOIN queries"
        },
        {
          "ancestorTitles": ["SQLite encodeQuery"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeQuery encodes column comparisons on JOIN queries",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "encodes column comparisons on JOIN queries"
        },
        {
          "ancestorTitles": ["SQLite encodeQuery"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeQuery encodes on nested in and/or",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "encodes on nested in and/or"
        },
        {
          "ancestorTitles": ["SQLite encodeQuery"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeQuery encodes Q.on nested inside Q.on",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "encodes Q.on nested inside Q.on"
        },
        {
          "ancestorTitles": ["SQLite encodeQuery"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeQuery encodes multiple conditions on Q.on",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "encodes multiple conditions on Q.on"
        },
        {
          "ancestorTitles": ["SQLite encodeQuery"],
          "duration": 32,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeQuery fails to encode bad oneOf/notIn values",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "fails to encode bad oneOf/notIn values"
        },
        {
          "ancestorTitles": ["SQLite encodeQuery"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeQuery fails to encode nested on without explicit joinTables",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "fails to encode nested on without explicit joinTables"
        },
        {
          "ancestorTitles": ["SQLite encodeQuery"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeQuery encodes order by clause",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "encodes order by clause"
        },
        {
          "ancestorTitles": ["SQLite encodeQuery"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeQuery encodes multiple order by clauses",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "encodes multiple order by clauses"
        },
        {
          "ancestorTitles": ["SQLite encodeQuery"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeQuery encodes limit clause",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "encodes limit clause"
        },
        {
          "ancestorTitles": ["SQLite encodeQuery"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeQuery encodes limit with offset clause",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "encodes limit with offset clause"
        },
        {
          "ancestorTitles": ["SQLite encodeQuery"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeQuery encodes order by together with limit and offset clause",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "encodes order by together with limit and offset clause"
        },
        {
          "ancestorTitles": ["SQLite encodeQuery"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeQuery encodes unsafe SQL queries",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "encodes unsafe SQL queries"
        },
        {
          "ancestorTitles": ["SQLite encodeQuery"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeQuery does not encode loki-specific syntax",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "does not encode loki-specific syntax"
        }
      ],
      "endTime": 1728536897833,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\adapters\\sqlite\\encodeQuery\\test.js",
      "startTime": 1728536893161,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Collection"],
          "duration": 83,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Collection exposes database",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "exposes database"
        },
        {
          "ancestorTitles": ["Collection"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Collection exposes schema",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "exposes schema"
        },
        {
          "ancestorTitles": ["Collection"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Collection exposes query()",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "exposes query()"
        },
        {
          "ancestorTitles": ["Collection"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Collection query() can accept both a spread and an array",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "query() can accept both a spread and an array"
        },
        {
          "ancestorTitles": ["finding records"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "finding records finds records in cache if available",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "finds records in cache if available"
        },
        {
          "ancestorTitles": ["finding records"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "finding records finds records in database if not in cache",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 9,
          "retryReasons": [],
          "status": "passed",
          "title": "finds records in database if not in cache"
        },
        {
          "ancestorTitles": ["finding records"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "finding records rejects promise if record cannot be found",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "rejects promise if record cannot be found"
        },
        {
          "ancestorTitles": ["finding records"],
          "duration": 6,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "finding records quickly rejects for invalid IDs",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "quickly rejects for invalid IDs"
        },
        {
          "ancestorTitles": ["fetching queries"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "fetching queries fetches queries and caches records",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 10,
          "retryReasons": [],
          "status": "passed",
          "title": "fetches queries and caches records"
        },
        {
          "ancestorTitles": ["fetching queries"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "fetching queries fetches query records from cache if possible",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "fetches query records from cache if possible"
        },
        {
          "ancestorTitles": ["fetching queries"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "fetching queries fetches query records from cache even if full raw object was sent",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "fetches query records from cache even if full raw object was sent"
        },
        {
          "ancestorTitles": ["fetching queries"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "fetching queries fetches counts",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "fetches counts"
        },
        {
          "ancestorTitles": ["fetching queries"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "fetching queries fetches ids",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "fetches ids"
        },
        {
          "ancestorTitles": ["fetching queries"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "fetching queries fetches raws",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "fetches raws"
        },
        {
          "ancestorTitles": ["creating new records"],
          "duration": 6,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "creating new records can create records",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 8,
          "retryReasons": [],
          "status": "passed",
          "title": "can create records"
        },
        {
          "ancestorTitles": ["creating new records"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "creating new records can prepare records",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "can prepare records"
        },
        {
          "ancestorTitles": ["creating new records"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "creating new records can prepare records from raw",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "can prepare records from raw"
        },
        {
          "ancestorTitles": ["creating new records"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "creating new records can prepare a disposable record from raw",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "can prepare a disposable record from raw"
        },
        {
          "ancestorTitles": ["creating new records"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "creating new records disallows record creating outside of a writer",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "disallows record creating outside of a writer"
        },
        {
          "ancestorTitles": ["Collection observation"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Collection observation can subscribe to collection changes",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 10,
          "retryReasons": [],
          "status": "passed",
          "title": "can subscribe to collection changes"
        },
        {
          "ancestorTitles": ["Collection observation"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Collection observation unsubscribe can safely be called more than once",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "unsubscribe can safely be called more than once"
        },
        {
          "ancestorTitles": ["Collection observation"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Collection observation can subscribe with the same subscriber multiple times",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 5,
          "retryReasons": [],
          "status": "passed",
          "title": "can subscribe with the same subscriber multiple times"
        }
      ],
      "endTime": 1728536898051,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\Collection\\test.js",
      "startTime": 1728536893155,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Model"],
          "duration": 10,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Model exposes database",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "exposes database"
        },
        {
          "ancestorTitles": ["Model"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Model exposes collections",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "exposes collections"
        },
        {
          "ancestorTitles": ["Model"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Model has wmelon tag",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "has wmelon tag"
        },
        {
          "ancestorTitles": ["CRUD"],
          "duration": 8,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "CRUD _prepareCreate: can instantiate new records",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 9,
          "retryReasons": [],
          "status": "passed",
          "title": "_prepareCreate: can instantiate new records"
        },
        {
          "ancestorTitles": ["CRUD"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "CRUD _prepareCreateFromDirtyRaw: can instantiate new records",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 10,
          "retryReasons": [],
          "status": "passed",
          "title": "_prepareCreateFromDirtyRaw: can instantiate new records"
        },
        {
          "ancestorTitles": ["CRUD"],
          "duration": 6,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "CRUD can update a record",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 10,
          "retryReasons": [],
          "status": "passed",
          "title": "can update a record"
        },
        {
          "ancestorTitles": ["CRUD"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "CRUD can prepare an update",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 9,
          "retryReasons": [],
          "status": "passed",
          "title": "can prepare an update"
        },
        {
          "ancestorTitles": ["CRUD"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "CRUD can destroy a record permanently",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 7,
          "retryReasons": [],
          "status": "passed",
          "title": "can destroy a record permanently"
        },
        {
          "ancestorTitles": ["CRUD"],
          "duration": 76,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "CRUD can destroy a record and its children permanently",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "can destroy a record and its children permanently"
        },
        {
          "ancestorTitles": ["CRUD"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "CRUD can mark a record as deleted",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 7,
          "retryReasons": [],
          "status": "passed",
          "title": "can mark a record as deleted"
        },
        {
          "ancestorTitles": ["CRUD"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "CRUD can mark as deleted record and its children permanently",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "can mark as deleted record and its children permanently"
        },
        {
          "ancestorTitles": ["Safety features"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Safety features throws if batch is not called synchronously with prepareUpdate",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "throws if batch is not called synchronously with prepareUpdate"
        },
        {
          "ancestorTitles": ["Safety features"],
          "duration": 48,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Safety features disallows field changes outside of create/update",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "disallows field changes outside of create/update"
        },
        {
          "ancestorTitles": ["Safety features"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Safety features disallows changes to just-deleted records",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "disallows changes to just-deleted records"
        },
        {
          "ancestorTitles": ["Safety features"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Safety features disallows changes to previously-deleted records",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "disallows changes to previously-deleted records"
        },
        {
          "ancestorTitles": ["Safety features"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Safety features diallows direct manipulation of id",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "diallows direct manipulation of id"
        },
        {
          "ancestorTitles": ["Safety features"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Safety features disallows operations on uncommited records",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 5,
          "retryReasons": [],
          "status": "passed",
          "title": "disallows operations on uncommited records"
        },
        {
          "ancestorTitles": ["Safety features"],
          "duration": 15,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Safety features disallows changes on records with pending updates",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "disallows changes on records with pending updates"
        },
        {
          "ancestorTitles": ["Safety features"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Safety features disallows writes outside of an writer",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 10,
          "retryReasons": [],
          "status": "passed",
          "title": "disallows writes outside of an writer"
        },
        {
          "ancestorTitles": ["Automatic created_at/updated_at"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Automatic created_at/updated_at _prepareCreate: sets created_at on create if model defines it",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "_prepareCreate: sets created_at on create if model defines it"
        },
        {
          "ancestorTitles": ["Automatic created_at/updated_at"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Automatic created_at/updated_at _prepareCreate: sets created_at, updated_at on create if model defines it",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "_prepareCreate: sets created_at, updated_at on create if model defines it"
        },
        {
          "ancestorTitles": ["Automatic created_at/updated_at"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Automatic created_at/updated_at touches updated_at on update if model defines it",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "touches updated_at on update if model defines it"
        },
        {
          "ancestorTitles": ["RawRecord manipulation"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "RawRecord manipulation allows raw access via _getRaw",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "allows raw access via _getRaw"
        },
        {
          "ancestorTitles": ["RawRecord manipulation"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "RawRecord manipulation allows raw writes via _setRaw",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "allows raw writes via _setRaw"
        },
        {
          "ancestorTitles": ["RawRecord manipulation"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "RawRecord manipulation allows raw writes via _dangerouslySetRawWithoutMarkingColumnChange",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "allows raw writes via _dangerouslySetRawWithoutMarkingColumnChange"
        },
        {
          "ancestorTitles": ["Sync status fields"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Sync status fields adds to changes on _setRaw",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 8,
          "retryReasons": [],
          "status": "passed",
          "title": "adds to changes on _setRaw"
        },
        {
          "ancestorTitles": ["Sync status fields"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Sync status fields does not add to _changed if sanitized value is equal to current value",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "does not add to _changed if sanitized value is equal to current value"
        },
        {
          "ancestorTitles": ["Sync status fields"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Sync status fields does not change _changed fields when using _dangerouslySetRawWithoutMarkingColumnChange",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "does not change _changed fields when using _dangerouslySetRawWithoutMarkingColumnChange"
        },
        {
          "ancestorTitles": ["Sync status fields"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Sync status fields marks new records as status:created",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 5,
          "retryReasons": [],
          "status": "passed",
          "title": "marks new records as status:created"
        },
        {
          "ancestorTitles": ["Sync status fields"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Sync status fields marks updated records with changed fields",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 5,
          "retryReasons": [],
          "status": "passed",
          "title": "marks updated records with changed fields"
        },
        {
          "ancestorTitles": ["Sync status fields"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Sync status fields marks update_at as updated when auto-touched",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "marks update_at as updated when auto-touched"
        },
        {
          "ancestorTitles": ["Disposable Models"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Disposable Models can create a disposable record",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 8,
          "retryReasons": [],
          "status": "passed",
          "title": "can create a disposable record"
        },
        {
          "ancestorTitles": ["Disposable Models"],
          "duration": 6,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Disposable Models cannot modify a disposable record",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 9,
          "retryReasons": [],
          "status": "passed",
          "title": "cannot modify a disposable record"
        },
        {
          "ancestorTitles": ["Model observation"],
          "duration": 32,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Model observation notifies Rx observers of changes and deletion",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "notifies Rx observers of changes and deletion"
        },
        {
          "ancestorTitles": ["Model observation"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Model observation notifies subscribers of changes and deletion",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 13,
          "retryReasons": [],
          "status": "passed",
          "title": "notifies subscribers of changes and deletion"
        },
        {
          "ancestorTitles": ["Model observation"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Model observation unsubscribe can safely be called more than once",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "unsubscribe can safely be called more than once"
        },
        {
          "ancestorTitles": ["Model observation"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Model observation can subscribe with the same subscriber multiple times",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 6,
          "retryReasons": [],
          "status": "passed",
          "title": "can subscribe with the same subscriber multiple times"
        },
        {
          "ancestorTitles": ["model helpers"],
          "duration": 6,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "model helpers checks if fetchDescendants retrieves all the children",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "checks if fetchDescendants retrieves all the children"
        }
      ],
      "endTime": 1728536898222,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\Model\\test.js",
      "startTime": 1728536893145,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["applyRemoteChanges"],
          "duration": 128,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "applyRemoteChanges does nothing if no remote changes",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "does nothing if no remote changes"
        },
        {
          "ancestorTitles": ["applyRemoteChanges"],
          "duration": 11,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "applyRemoteChanges can create, update, delete records",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "can create, update, delete records"
        },
        {
          "ancestorTitles": ["applyRemoteChanges"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "applyRemoteChanges can resolve update conflicts",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "can resolve update conflicts"
        },
        {
          "ancestorTitles": ["applyRemoteChanges"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "applyRemoteChanges can delete records in all edge cases",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "can delete records in all edge cases"
        },
        {
          "ancestorTitles": ["applyRemoteChanges"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "applyRemoteChanges can handle sync failure cases",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "can handle sync failure cases"
        },
        {
          "ancestorTitles": ["applyRemoteChanges"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "applyRemoteChanges can handle weird edge cases",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "can handle weird edge cases"
        },
        {
          "ancestorTitles": ["applyRemoteChanges", "replacement sync"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "applyRemoteChanges replacement sync can clear database using replacement strategy",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "can clear database using replacement strategy"
        },
        {
          "ancestorTitles": ["applyRemoteChanges", "replacement sync"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "applyRemoteChanges replacement sync can clear database using replacement strategy (but locally created are preserved)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "can clear database using replacement strategy (but locally created are preserved)"
        },
        {
          "ancestorTitles": ["applyRemoteChanges", "replacement sync"],
          "duration": 13,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "applyRemoteChanges replacement sync can apply changes using replacement strategy",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 10,
          "retryReasons": [],
          "status": "passed",
          "title": "can apply changes using replacement strategy"
        },
        {
          "ancestorTitles": ["applyRemoteChanges", "replacement sync"],
          "duration": 23,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "applyRemoteChanges replacement sync can apply changes using replacement with per-table granularity",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "can apply changes using replacement with per-table granularity"
        },
        {
          "ancestorTitles": ["applyRemoteChanges", "replacement sync"],
          "duration": 7,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "applyRemoteChanges replacement sync can apply changes using partial replacement",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 5,
          "retryReasons": [],
          "status": "passed",
          "title": "can apply changes using partial replacement"
        },
        {
          "ancestorTitles": ["applyRemoteChanges", "timestamp management"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "applyRemoteChanges timestamp management doesn't touch created_at/updated_at when applying updates",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "doesn't touch created_at/updated_at when applying updates"
        },
        {
          "ancestorTitles": ["applyRemoteChanges", "timestamp management"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "applyRemoteChanges timestamp management can replace created_at/updated_at during sync",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "can replace created_at/updated_at during sync"
        },
        {
          "ancestorTitles": ["applyRemoteChanges"],
          "duration": null,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "applyRemoteChanges doesn't destroy dependent objects",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "pending",
          "title": "doesn't destroy dependent objects"
        },
        {
          "ancestorTitles": ["applyRemoteChanges"],
          "duration": null,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "applyRemoteChanges only emits one collection batch change",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "pending",
          "title": "only emits one collection batch change"
        },
        {
          "ancestorTitles": ["applyRemoteChanges"],
          "duration": 8,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "applyRemoteChanges rejects invalid records",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 7,
          "retryReasons": [],
          "status": "passed",
          "title": "rejects invalid records"
        },
        {
          "ancestorTitles": ["applyRemoteChanges"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "applyRemoteChanges safely skips collections that don't exist",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "safely skips collections that don't exist"
        },
        {
          "ancestorTitles": ["applyRemoteChanges"],
          "duration": 7,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "applyRemoteChanges doesn't currupt RecordCache (regression test)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "doesn't currupt RecordCache (regression test)"
        }
      ],
      "endTime": 1728536898241,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\sync\\impl\\__tests__\\applyRemote.test.js",
      "startTime": 1728536893150,
      "status": "focused",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["subscribeToQueryWithColumns"],
          "duration": 119,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "subscribeToQueryWithColumns observes changes correctly - test with simple observer",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 20,
          "retryReasons": [],
          "status": "passed",
          "title": "observes changes correctly - test with simple observer"
        },
        {
          "ancestorTitles": ["subscribeToQueryWithColumns"],
          "duration": 13,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "subscribeToQueryWithColumns observes changes correctly - test with reloading observer",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 21,
          "retryReasons": [],
          "status": "passed",
          "title": "observes changes correctly - test with reloading observer"
        }
      ],
      "endTime": 1728536898315,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\observation\\subscribeToQueryWithColumns\\test.js",
      "startTime": 1728536897334,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Query", "description properties"],
          "duration": 15,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Query description properties returns tables correctly for simple queries",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "returns tables correctly for simple queries"
        },
        {
          "ancestorTitles": ["Query", "description properties"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Query description properties returns tables correctly for complex queries",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "returns tables correctly for complex queries"
        },
        {
          "ancestorTitles": ["Query", "description properties"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Query description properties returns associations correctly for simple queries",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "returns associations correctly for simple queries"
        },
        {
          "ancestorTitles": ["Query", "description properties"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Query description properties returns associations correctly for more complex queries",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "returns associations correctly for more complex queries"
        },
        {
          "ancestorTitles": ["Query", "description properties"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Query description properties returns associations correctly for explicit joins",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "returns associations correctly for explicit joins"
        },
        {
          "ancestorTitles": ["Query", "description properties"],
          "duration": 38,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Query description properties throws an error on incorrect associations",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "throws an error on incorrect associations"
        },
        {
          "ancestorTitles": ["Query", "Query.extend()"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Query Query.extend() can return extended query",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 6,
          "retryReasons": [],
          "status": "passed",
          "title": "can return extended query"
        },
        {
          "ancestorTitles": ["Query", "Query.extend()"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Query Query.extend() can return extended query for sortBy, take and skip",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "can return extended query for sortBy, take and skip"
        },
        {
          "ancestorTitles": ["Query", "Query.extend()"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Query Query.extend() can return extended query and leave take and skip clauses intact",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "can return extended query and leave take and skip clauses intact"
        },
        {
          "ancestorTitles": ["Query", "Query.extend()"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Query Query.extend() can extend query for join tables",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "can extend query for join tables"
        },
        {
          "ancestorTitles": ["Query", "Query.extend()"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Query Query.extend() can extend query with unsafeLokiTransform",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "can extend query with unsafeLokiTransform"
        },
        {
          "ancestorTitles": ["Query", "Query.extend()"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Query Query.extend() can return double extended query",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 6,
          "retryReasons": [],
          "status": "passed",
          "title": "can return double extended query"
        },
        {
          "ancestorTitles": ["Query", "Query.extend()"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Query Query.extend() cannot extend an unsafe SQL query",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "cannot extend an unsafe SQL query"
        },
        {
          "ancestorTitles": ["Query", "Query.extend()"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Query Query.extend() can pass array instead of a list",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "can pass array instead of a list"
        },
        {
          "ancestorTitles": ["Query"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Query can pipe query",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "can pipe query"
        },
        {
          "ancestorTitles": ["Query"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Query returns serializable version of Query",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "returns serializable version of Query"
        },
        {
          "ancestorTitles": ["Query", "fetching"],
          "duration": null,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Query fetching can fetch query",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "pending",
          "title": "can fetch query"
        },
        {
          "ancestorTitles": ["Query", "fetching"],
          "duration": null,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Query fetching can fetch count",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "pending",
          "title": "can fetch count"
        },
        {
          "ancestorTitles": ["Query", "fetching"],
          "duration": 73,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Query fetching is thenable",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "is thenable"
        },
        {
          "ancestorTitles": ["Query", "fetching"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Query fetching count is thenable",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "count is thenable"
        },
        {
          "ancestorTitles": ["Query", "observation"],
          "duration": 32,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Query observation can observe query",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 8,
          "retryReasons": [],
          "status": "passed",
          "title": "can observe query"
        },
        {
          "ancestorTitles": ["Query", "observation"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Query observation can subscribe to query",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 8,
          "retryReasons": [],
          "status": "passed",
          "title": "can subscribe to query"
        },
        {
          "ancestorTitles": ["Query", "observation"],
          "duration": 9,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Query observation can observe query with columns",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 8,
          "retryReasons": [],
          "status": "passed",
          "title": "can observe query with columns"
        },
        {
          "ancestorTitles": ["Query", "observation"],
          "duration": 8,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Query observation can subscribe to query with columns",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 8,
          "retryReasons": [],
          "status": "passed",
          "title": "can subscribe to query with columns"
        },
        {
          "ancestorTitles": ["Query", "observation"],
          "duration": 317,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Query observation can observe (throttled) count",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 9,
          "retryReasons": [],
          "status": "passed",
          "title": "can observe (throttled) count"
        },
        {
          "ancestorTitles": ["Query", "observation"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Query observation can observe (unthrottled) count",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 9,
          "retryReasons": [],
          "status": "passed",
          "title": "can observe (unthrottled) count"
        },
        {
          "ancestorTitles": ["Query", "observation"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Query observation can subscribe to count",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 9,
          "retryReasons": [],
          "status": "passed",
          "title": "can subscribe to count"
        },
        {
          "ancestorTitles": ["Query", "mass delete"],
          "duration": 11,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Query mass delete can mark all as deleted",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "can mark all as deleted"
        },
        {
          "ancestorTitles": ["Query", "mass delete"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Query mass delete can destroy all permanently",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "can destroy all permanently"
        },
        {
          "ancestorTitles": ["Query"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Query has wmelon tag",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "has wmelon tag"
        }
      ],
      "endTime": 1728536898437,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\Query\\test.js",
      "startTime": 1728536893135,
      "status": "focused",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["synchronize"],
          "duration": 136,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "synchronize can perform an empty sync",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "can perform an empty sync"
        },
        {
          "ancestorTitles": ["synchronize"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "synchronize doesn't push changes if nothing to push",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "doesn't push changes if nothing to push"
        },
        {
          "ancestorTitles": ["synchronize"],
          "duration": 58,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "synchronize can log basic information about a sync",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 9,
          "retryReasons": [],
          "status": "passed",
          "title": "can log basic information about a sync"
        },
        {
          "ancestorTitles": ["synchronize"],
          "duration": 123,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "synchronize notifies user about remote change count",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "notifies user about remote change count"
        },
        {
          "ancestorTitles": ["synchronize"],
          "duration": 43,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "synchronize will not push changes if no `pushChanges`",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "will not push changes if no `pushChanges`"
        },
        {
          "ancestorTitles": ["synchronize"],
          "duration": 20,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "synchronize can push changes",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "can push changes"
        },
        {
          "ancestorTitles": ["synchronize"],
          "duration": 20,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "synchronize can pull changes",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 5,
          "retryReasons": [],
          "status": "passed",
          "title": "can pull changes"
        },
        {
          "ancestorTitles": ["synchronize"],
          "duration": 21,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "synchronize can synchronize changes with conflicts",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 16,
          "retryReasons": [],
          "status": "passed",
          "title": "can synchronize changes with conflicts"
        },
        {
          "ancestorTitles": ["synchronize"],
          "duration": 9,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "synchronize allows conflict resolution to be customized",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 8,
          "retryReasons": [],
          "status": "passed",
          "title": "allows conflict resolution to be customized"
        },
        {
          "ancestorTitles": ["synchronize"],
          "duration": 8,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "synchronize remembers last_synced_at timestamp",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 7,
          "retryReasons": [],
          "status": "passed",
          "title": "remembers last_synced_at timestamp"
        },
        {
          "ancestorTitles": ["synchronize"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "synchronize validates timestamp returned from pullChanges",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "validates timestamp returned from pullChanges"
        },
        {
          "ancestorTitles": ["synchronize"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "synchronize can recover from pull failure",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 8,
          "retryReasons": [],
          "status": "passed",
          "title": "can recover from pull failure"
        },
        {
          "ancestorTitles": ["synchronize"],
          "duration": 12,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "synchronize can recover from push failure",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 7,
          "retryReasons": [],
          "status": "passed",
          "title": "can recover from push failure"
        },
        {
          "ancestorTitles": ["synchronize"],
          "duration": 52,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "synchronize can safely handle local changes during sync",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 14,
          "retryReasons": [],
          "status": "passed",
          "title": "can safely handle local changes during sync"
        },
        {
          "ancestorTitles": ["synchronize"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "synchronize can safely update created records during push (regression test)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "can safely update created records during push (regression test)"
        },
        {
          "ancestorTitles": ["synchronize"],
          "duration": null,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "synchronize can accept remote changes received during push",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "pending",
          "title": "can accept remote changes received during push"
        },
        {
          "ancestorTitles": ["synchronize"],
          "duration": null,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "synchronize can resolve push-time sync conflicts",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "pending",
          "title": "can resolve push-time sync conflicts"
        },
        {
          "ancestorTitles": ["synchronize"],
          "duration": null,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "synchronize only emits one collection batch change",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "pending",
          "title": "only emits one collection batch change"
        }
      ],
      "endTime": 1728536898553,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\sync\\impl\\__tests__\\synchronize.test.js",
      "startTime": 1728536893136,
      "status": "focused",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["synchronize - migration syncs"],
          "duration": 105,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "synchronize - migration syncs remembers synced schema version on first sync",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "remembers synced schema version on first sync"
        },
        {
          "ancestorTitles": ["synchronize - migration syncs"],
          "duration": 6,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "synchronize - migration syncs remembers synced schema version on first sync, even if migrations are not enabled",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "remembers synced schema version on first sync, even if migrations are not enabled"
        },
        {
          "ancestorTitles": ["synchronize - migration syncs"],
          "duration": 8,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "synchronize - migration syncs does not remember schema version if migration syncs are not enabled",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "does not remember schema version if migration syncs are not enabled"
        },
        {
          "ancestorTitles": ["synchronize - migration syncs"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "synchronize - migration syncs performs no migration if up to date",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "performs no migration if up to date"
        },
        {
          "ancestorTitles": ["synchronize - migration syncs"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "synchronize - migration syncs performs migration sync on schema version bump",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "performs migration sync on schema version bump"
        },
        {
          "ancestorTitles": ["synchronize - migration syncs"],
          "duration": 8,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "synchronize - migration syncs performs fallback migration sync",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "performs fallback migration sync"
        },
        {
          "ancestorTitles": ["synchronize - migration syncs"],
          "duration": 8,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "synchronize - migration syncs does not remember schema version if pull fails",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "does not remember schema version if pull fails"
        },
        {
          "ancestorTitles": ["synchronize - migration syncs"],
          "duration": 6,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "synchronize - migration syncs fails on programmer errors",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "fails on programmer errors"
        },
        {
          "ancestorTitles": ["synchronize - migration syncs"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "synchronize - migration syncs fails on last synced schema version > current schema version",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "fails on last synced schema version > current schema version"
        }
      ],
      "endTime": 1728536898657,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\sync\\impl\\__tests__\\synchronize-migration.test.js",
      "startTime": 1728536897930,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["synchronize - benchmark"],
          "duration": 291,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "synchronize - benchmark can synchronize lots of data",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 6,
          "retryReasons": [],
          "status": "passed",
          "title": "can synchronize lots of data"
        },
        {
          "ancestorTitles": ["synchronize - benchmark"],
          "duration": 141,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "synchronize - benchmark can run a large replacement sync",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "can run a large replacement sync"
        }
      ],
      "endTime": 1728536898756,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\sync\\impl\\__tests__\\synchronize-benchmark.test.js",
      "startTime": 1728536897862,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["useDatabase hook"],
          "duration": 20,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "useDatabase hook should use database",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should use database"
        },
        {
          "ancestorTitles": ["useDatabase hook"],
          "duration": 41,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "useDatabase hook should throw without Provider",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should throw without Provider"
        }
      ],
      "endTime": 1728536898835,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\react\\useDatabase.test.js",
      "startTime": 1728536898407,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["DatabaseProvider"],
          "duration": 144,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "DatabaseProvider throws if no database or adapter supplied",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "throws if no database or adapter supplied"
        },
        {
          "ancestorTitles": ["DatabaseProvider"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "DatabaseProvider passes database to consumer",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "passes database to consumer"
        },
        {
          "ancestorTitles": ["DatabaseProvider", "withDatabase"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "DatabaseProvider withDatabase should pass the database from the context to the consumer",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should pass the database from the context to the consumer"
        }
      ],
      "endTime": 1728536898883,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\react\\DatabaseProvider.test.js",
      "startTime": 1728536898394,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: matches everything",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: matches everything"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: matches strings",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: matches strings"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: matches `true`",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 6,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: matches `true`"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: matches `false`",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 6,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: matches `false`"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: matches `null`",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 6,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: matches `null`"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: matches integers (0)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 6,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: matches integers (0)"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: matches integers (1)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 6,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: matches integers (1)"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: matches floats",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: matches floats"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: matches big numbers (e.g. JS timestamps)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: matches big numbers (e.g. JS timestamps)"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: matches multiple conditions",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 5,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: matches multiple conditions"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: matches by greater-than",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 6,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: matches by greater-than"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: matches by greater-than-or-equal",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 8,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: matches by greater-than-or-equal"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: matches by greater-than with JS-like semantics",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 6,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: matches by greater-than with JS-like semantics"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: matches by less-than",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 5,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: matches by less-than"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: matches by less-than-or-equal",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 5,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: matches by less-than-or-equal"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: matches by not-equal",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 7,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: matches by not-equal"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: matches not-equal(null)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 7,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: matches not-equal(null)"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: matches by IN",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 5,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: matches by IN"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: matches by NOT IN",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 7,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: matches by NOT IN"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: matches by BETWEEN",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 6,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: matches by BETWEEN"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: can compare columns (eq)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 18,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: can compare columns (eq)"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: can compare columns (notEq)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 18,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: can compare columns (notEq)"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: can compare columns (less-than)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 12,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: can compare columns (less-than)"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: can compare columns (less-than-or-equal)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 11,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: can compare columns (less-than-or-equal)"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: can compare columns (greater-than/float)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 12,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: can compare columns (greater-than/float)"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: can compare columns (greater-than-or-equal/integer)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 11,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: can compare columns (greater-than-or-equal/integer)"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: can compare columns (string/null)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 9,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: can compare columns (string/null)"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: can compare columns (greater-than with JS semantics)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 13,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: can compare columns (greater-than with JS semantics)"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: matches complex queries with AND/OR nesting",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 13,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: matches complex queries with AND/OR nesting"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: can match by less-than with JS semantics",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: can match by less-than with JS semantics"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: can match by NOT IN with JS semantics",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 5,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: can match by NOT IN with JS semantics"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: matches like (string)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 6,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: matches like (string)"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: matches notLike (string)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 6,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: matches notLike (string)"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: matches like (value%)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 6,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: matches like (value%)"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: matches notLike (value%)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 6,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: matches notLike (value%)"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: matches like (%value)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 8,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: matches like (%value)"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: matches notLike (%value)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 6,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: matches notLike (%value)"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: matches like (value%value)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 7,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: matches like (value%value)"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: matches notLike (value%value)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 7,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: matches notLike (value%value)"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: matches like (value%value%)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 8,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: matches like (value%value%)"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: matches notLike (value%value%)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 8,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: matches notLike (value%value%)"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: matches like (v_lue%v_lue%)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 9,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: matches like (v_lue%v_lue%)"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: matches notLike (v_lue%v_lue%)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 9,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: matches notLike (v_lue%v_lue%)"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: matches like (_alu_)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 8,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: matches like (_alu_)"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: matches like sanitized (value%)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 7,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: matches like sanitized (value%)"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: matches like sanitized (value_)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 7,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: matches like sanitized (value_)"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: matches like sanitized (value.*)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 7,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: matches like sanitized (value.*)"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: matches like sanitized (%(value,)%)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 6,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: matches like sanitized (%(value,)%)"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: matches includes(foo)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 14,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: matches includes(foo)"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: matches includes()",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: matches includes()"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: matches unsafe SQL expression",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: matches unsafe SQL expression"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: matches unsafe SQL query",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: matches unsafe SQL query"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: matches unsafe SQL query with values",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: matches unsafe SQL query with values"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: can count with unsafe SQL query with values",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: can count with unsafe SQL query with values"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: matches unsafe Loki expression",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: matches unsafe Loki expression"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: sorts results by string",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: sorts results by string"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: sorts results by string, descending",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: sorts results by string, descending"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: sorts results by number",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: sorts results by number"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: sorts results by boolean",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: sorts results by boolean"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: sorts results by multiple columns",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: sorts results by multiple columns"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: matches with sortBy & take",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: matches with sortBy & take"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes db test: matches with sortBy, take & skip",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "passes db test: matches with sortBy, take & skip"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 195,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher passes big-list-of-naughty-string matches",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1587,
          "retryReasons": [],
          "status": "passed",
          "title": "passes big-list-of-naughty-string matches"
        },
        {
          "ancestorTitles": ["SQLite encodeMatcher"],
          "duration": 21,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeMatcher throws on queries it cannot encode",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 11,
          "retryReasons": [],
          "status": "passed",
          "title": "throws on queries it cannot encode"
        },
        {
          "ancestorTitles": ["canEncodeMatcher"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "canEncodeMatcher can tell you if a query is encodable",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 9,
          "retryReasons": [],
          "status": "passed",
          "title": "can tell you if a query is encodable"
        }
      ],
      "endTime": 1728536898913,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\observation\\encodeMatcher\\test.js",
      "startTime": 1728536898345,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["synchronize - aborts"],
          "duration": 326,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "synchronize - aborts aborts on concurrent synchronization",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "aborts on concurrent synchronization"
        },
        {
          "ancestorTitles": ["synchronize - aborts"],
          "duration": 19,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "synchronize - aborts aborts if database is cleared during sync",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "aborts if database is cleared during sync"
        },
        {
          "ancestorTitles": ["synchronize - aborts"],
          "duration": 18,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "synchronize - aborts aborts if database is cleared during sync — different case",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "aborts if database is cleared during sync — different case"
        }
      ],
      "endTime": 1728536898935,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\sync\\impl\\__tests__\\synchronize-abort.test.js",
      "startTime": 1728536898247,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["synchronize - replacement syncs"],
          "duration": 32,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "synchronize - replacement syncs can synchronize using replacement strategy",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 5,
          "retryReasons": [],
          "status": "passed",
          "title": "can synchronize using replacement strategy"
        },
        {
          "ancestorTitles": ["synchronize - replacement syncs"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "synchronize - replacement syncs fails on incorrect strategy",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "fails on incorrect strategy"
        }
      ],
      "endTime": 1728536899001,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\sync\\impl\\__tests__\\synchronize-replacement.test.js",
      "startTime": 1728536898734,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["synchronize - turbo"],
          "duration": 21,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "synchronize - turbo validates turbo sync settings",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "validates turbo sync settings"
        },
        {
          "ancestorTitles": ["synchronize - turbo"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "synchronize - turbo can pull with turbo login",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 8,
          "retryReasons": [],
          "status": "passed",
          "title": "can pull with turbo login"
        },
        {
          "ancestorTitles": ["synchronize - turbo"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "synchronize - turbo can pull with turbo login (using native id)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 6,
          "retryReasons": [],
          "status": "passed",
          "title": "can pull with turbo login (using native id)"
        },
        {
          "ancestorTitles": ["synchronize - turbo", "onDidPullChanges"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "synchronize - turbo onDidPullChanges calls onDidPullChanges",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "calls onDidPullChanges"
        },
        {
          "ancestorTitles": ["synchronize - turbo", "onDidPullChanges"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "synchronize - turbo onDidPullChanges calls onDidPullChanges in turbo",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "calls onDidPullChanges in turbo"
        }
      ],
      "endTime": 1728536899007,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\sync\\impl\\__tests__\\synchronize-turbo.test.js",
      "startTime": 1728536898637,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["common observation tests"],
          "duration": 49,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "common observation tests updates list before model - test with subscribeToSimpleQuery",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 5,
          "retryReasons": [],
          "status": "passed",
          "title": "updates list before model - test with subscribeToSimpleQuery"
        },
        {
          "ancestorTitles": ["common observation tests"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "common observation tests updates list before model - test with reloadingObserver",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 5,
          "retryReasons": [],
          "status": "passed",
          "title": "updates list before model - test with reloadingObserver"
        },
        {
          "ancestorTitles": ["common observation tests"],
          "duration": 9,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "common observation tests updates list before model - test with subscribeToQueryWithColumns and simple observer",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 5,
          "retryReasons": [],
          "status": "passed",
          "title": "updates list before model - test with subscribeToQueryWithColumns and simple observer"
        },
        {
          "ancestorTitles": ["common observation tests"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "common observation tests updates list before model - test with subscribeToQueryWithColumns and reloading observer",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 5,
          "retryReasons": [],
          "status": "passed",
          "title": "updates list before model - test with subscribeToQueryWithColumns and reloading observer"
        }
      ],
      "endTime": 1728536899090,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\observation\\test.js",
      "startTime": 1728536898794,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["fetchLocalChanges"],
          "duration": 8,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "fetchLocalChanges returns empty object if no changes",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "returns empty object if no changes"
        },
        {
          "ancestorTitles": ["fetchLocalChanges"],
          "duration": 14,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "fetchLocalChanges fetches all local changes",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 8,
          "retryReasons": [],
          "status": "passed",
          "title": "fetches all local changes"
        },
        {
          "ancestorTitles": ["fetchLocalChanges"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "fetchLocalChanges returns object copies",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "returns object copies"
        },
        {
          "ancestorTitles": ["hasUnsyncedChanges"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "hasUnsyncedChanges has no unsynced changes by default",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "has no unsynced changes by default"
        },
        {
          "ancestorTitles": ["hasUnsyncedChanges"],
          "duration": 9,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "hasUnsyncedChanges has unsynced changes if made",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "has unsynced changes if made"
        },
        {
          "ancestorTitles": ["hasUnsyncedChanges"],
          "duration": 6,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "hasUnsyncedChanges just one update is enough",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "just one update is enough"
        },
        {
          "ancestorTitles": ["hasUnsyncedChanges"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "hasUnsyncedChanges just one delete is enough",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "just one delete is enough"
        }
      ],
      "endTime": 1728536899105,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\sync\\impl\\__tests__\\fetchLocal.test.js",
      "startTime": 1728536898814,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["decorators/utils/readonly"],
          "duration": 7,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "decorators/utils/readonly throws on attempt to call a setter of @readonly field",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "throws on attempt to call a setter of @readonly field"
        },
        {
          "ancestorTitles": ["decorators/utils/readonly"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "decorators/utils/readonly throws on attempt to set a new value to @readonly field",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "throws on attempt to set a new value to @readonly field"
        }
      ],
      "endTime": 1728536899092,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\decorators\\readonly\\test.js",
      "startTime": 1728536898865,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["decorators/relation"],
          "duration": 9,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "decorators/relation creates Relation object",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "creates Relation object"
        },
        {
          "ancestorTitles": ["decorators/relation"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "decorators/relation works on arbitrary objects with asModel",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "works on arbitrary objects with asModel"
        },
        {
          "ancestorTitles": ["decorators/relation"],
          "duration": 9,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "decorators/relation disallows to set relation directly",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "disallows to set relation directly"
        },
        {
          "ancestorTitles": ["decorators/relation"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "decorators/relation caches Relation object",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "caches Relation object"
        }
      ],
      "endTime": 1728536899188,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\decorators\\relation\\test.js",
      "startTime": 1728536898943,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 182,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) validates adapter options",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 7,
          "retryReasons": [],
          "status": "passed",
          "title": "validates adapter options"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) can query and count on empty db",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "can query and count on empty db"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) can create and find records (sanity test)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "can create and find records (sanity test)"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 6,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) can find records by ID",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 5,
          "retryReasons": [],
          "status": "passed",
          "title": "can find records by ID"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 12,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) can cache non-global IDs on find",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 5,
          "retryReasons": [],
          "status": "passed",
          "title": "can cache non-global IDs on find"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 7,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) can cache non-global IDs on query",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 5,
          "retryReasons": [],
          "status": "passed",
          "title": "can cache non-global IDs on query"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) sanitizes records on find",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "sanitizes records on find"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 8,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) can query and count records",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 9,
          "retryReasons": [],
          "status": "passed",
          "title": "can query and count records"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 7,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) compacts query results",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 7,
          "retryReasons": [],
          "status": "passed",
          "title": "compacts query results"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) sanitizes records on query",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "sanitizes records on query"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) returns a COPY of the data",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 5,
          "retryReasons": [],
          "status": "passed",
          "title": "returns a COPY of the data"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) can query record IDs",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "can query record IDs"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) can unsafely query raws with SQL",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "can unsafely query raws with SQL"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) can update records",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "can update records"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) can mark records as deleted",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "can mark records as deleted"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) can destroy records permanently",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "can destroy records permanently"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) can destroy permanently records already destroyed",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "can destroy permanently records already destroyed"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) can get deleted record ids",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "can get deleted record ids"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) can destroy deleted records",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "can destroy deleted records"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) destroyDeletedRecords can handle unsafe strings",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "destroyDeletedRecords can handle unsafe strings"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) can run mixed batches",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 6,
          "retryReasons": [],
          "status": "passed",
          "title": "can run mixed batches"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 102,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) batches are transactional",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "batches are transactional"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 6,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) can run sync-like flow",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "can run sync-like flow"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) can unsafely load from sync JSON",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "can unsafely load from sync JSON"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) can return residual JSON from sync JSON",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "can return residual JSON from sync JSON"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) destroys provided jsons after being used",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "destroys provided jsons after being used"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 17,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) can unsafely reset database",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "can unsafely reset database"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 11,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) queues actions correctly",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 10,
          "retryReasons": [],
          "status": "passed",
          "title": "queues actions correctly"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) fails on bad queries, creates, updates, deletes",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "fails on bad queries, creates, updates, deletes"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) can unsafely execute raw commands",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "can unsafely execute raw commands"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) supports LocalStorage",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 6,
          "retryReasons": [],
          "status": "passed",
          "title": "supports LocalStorage"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) only supports strings as LocalStorage values",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 7,
          "retryReasons": [],
          "status": "passed",
          "title": "only supports strings as LocalStorage values"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 82,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) supports naughty strings in LocalStorage",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 529,
          "retryReasons": [],
          "status": "passed",
          "title": "supports naughty strings in LocalStorage"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) does not fail on (weirdly named) table named that are SQLite keywords",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "does not fail on (weirdly named) table named that are SQLite keywords"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) fails quickly on non-existing table names",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 9,
          "retryReasons": [],
          "status": "passed",
          "title": "fails quickly on non-existing table names"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 13,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) migrates database between versions",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 14,
          "retryReasons": [],
          "status": "passed",
          "title": "migrates database between versions"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) migrations: renameColumn",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 6,
          "retryReasons": [],
          "status": "passed",
          "title": "migrations: renameColumn"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) migrations: destroyColumn",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 6,
          "retryReasons": [],
          "status": "passed",
          "title": "migrations: destroyColumn"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 11,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) migrations: renameColumn&destroyColumn (complex)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "migrations: renameColumn&destroyColumn (complex)"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 8,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) migrations: destroyTable",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "migrations: destroyTable"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) can perform empty migrations (regression test)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "can perform empty migrations (regression test)"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 6,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) resets database when it's newer than app schema",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "resets database when it's newer than app schema"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) resets database when there are no available migrations",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "resets database when there are no available migrations"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) errors when migration fails",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "errors when migration fails"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) can actually save and read from file system",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "can actually save and read from file system"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] matches everything",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches everything"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] matches strings",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches strings"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] matches `true`",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches `true`"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] matches `false`",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches `false`"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] matches `null`",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches `null`"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] matches integers (0)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches integers (0)"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] matches integers (1)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches integers (1)"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] matches floats",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches floats"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] matches big numbers (e.g. JS timestamps)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches big numbers (e.g. JS timestamps)"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] matches multiple conditions",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches multiple conditions"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] matches by greater-than",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches by greater-than"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] matches by greater-than-or-equal",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches by greater-than-or-equal"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] matches by greater-than with JS-like semantics",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches by greater-than with JS-like semantics"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] matches by less-than",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches by less-than"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] matches by less-than-or-equal",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches by less-than-or-equal"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] matches by not-equal",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches by not-equal"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] matches not-equal(null)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches not-equal(null)"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] matches by IN",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches by IN"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] matches by NOT IN",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches by NOT IN"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] matches by BETWEEN",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches by BETWEEN"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] can compare columns (eq)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] can compare columns (eq)"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] can compare columns (notEq)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] can compare columns (notEq)"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] can compare columns (less-than)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] can compare columns (less-than)"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] can compare columns (less-than-or-equal)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] can compare columns (less-than-or-equal)"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] can compare columns (greater-than/float)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] can compare columns (greater-than/float)"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] can compare columns (greater-than-or-equal/integer)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] can compare columns (greater-than-or-equal/integer)"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] can compare columns (string/null)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] can compare columns (string/null)"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] can compare columns (greater-than with JS semantics)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] can compare columns (greater-than with JS semantics)"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] matches complex queries with AND/OR nesting",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches complex queries with AND/OR nesting"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] can match by less-than with JS semantics",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] can match by less-than with JS semantics"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] can match by NOT IN with JS semantics",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] can match by NOT IN with JS semantics"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] matches like (string)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches like (string)"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] matches notLike (string)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches notLike (string)"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] matches like (value%)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches like (value%)"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] matches notLike (value%)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches notLike (value%)"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] matches like (%value)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches like (%value)"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] matches notLike (%value)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches notLike (%value)"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] matches like (value%value)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches like (value%value)"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] matches notLike (value%value)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches notLike (value%value)"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] matches like (value%value%)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches like (value%value%)"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] matches notLike (value%value%)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches notLike (value%value%)"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] matches like (v_lue%v_lue%)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches like (v_lue%v_lue%)"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] matches notLike (v_lue%v_lue%)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches notLike (v_lue%v_lue%)"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] matches like (_alu_)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches like (_alu_)"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] matches like sanitized (value%)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches like sanitized (value%)"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] matches like sanitized (value_)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches like sanitized (value_)"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] matches like sanitized (value.*)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches like sanitized (value.*)"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] matches like sanitized (%(value,)%)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches like sanitized (%(value,)%)"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] matches includes(foo)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches includes(foo)"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] matches includes()",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches includes()"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] matches unsafe SQL expression",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches unsafe SQL expression"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] matches unsafe SQL query",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches unsafe SQL query"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] matches unsafe SQL query with values",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches unsafe SQL query with values"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] can count with unsafe SQL query with values",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] can count with unsafe SQL query with values"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] matches unsafe Loki expression",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches unsafe Loki expression"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] sorts results by string",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] sorts results by string"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] sorts results by string, descending",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] sorts results by string, descending"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] sorts results by number",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] sorts results by number"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] sorts results by boolean",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] sorts results by boolean"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] sorts results by multiple columns",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] sorts results by multiple columns"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] matches with sortBy & take",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches with sortBy & take"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] matches with sortBy, take & skip",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches with sortBy, take & skip"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared join test] can perform simple JOIN queries",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared join test] can perform simple JOIN queries"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 6,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared join test] can perform complex JOIN queries",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared join test] can perform complex JOIN queries"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared join test] can perform Q.on with subexpressions",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared join test] can perform Q.on with subexpressions"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 13,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared join test] can perform Q.on's nested in Q.or and Q.and",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared join test] can perform Q.on's nested in Q.or and Q.and"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared join test] can perform Q.on's nested in Q.on",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared join test] can perform Q.on's nested in Q.on"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared join test] can perform deeply nested Q.ons",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared join test] can perform deeply nested Q.ons"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared join test] can perform both JOIN queries and column comparisons",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared join test] can perform both JOIN queries and column comparisons"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared join test] can perform a JOIN query containing column comparison",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared join test] can perform a JOIN query containing column comparison"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared join test] can perform a JOIN query containing weakGt column comparison",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared join test] can perform a JOIN query containing weakGt column comparison"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared join test] can perform a JOIN query on has_many collection with column comparisons",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared join test] can perform a JOIN query on has_many collection with column comparisons"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared join test] can perform deeply nested JOIN query with a column comparison",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared join test] can perform deeply nested JOIN query with a column comparison"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared join test] can compare columns between tables using unsafe SQL expressions",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared join test] can compare columns between tables using unsafe SQL expressions"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared join test] can compare columns between tables using unsafe SQL queries",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared join test] can compare columns between tables using unsafe SQL queries"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared join test] can compare columns between tables using unsafe Loki transform",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared join test] can compare columns between tables using unsafe Loki transform"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 332,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) [shared match test] can match strings from big-list-of-naughty-strings",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1587,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] can match strings from big-list-of-naughty-strings"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) can store and retrieve large numbers (regression test)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "can store and retrieve large numbers (regression test)"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 120,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) can store and retrieve naughty strings exactly",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1058,
          "retryReasons": [],
          "status": "passed",
          "title": "can store and retrieve naughty strings exactly"
        },
        {
          "ancestorTitles": ["LokiJSAdapter (Synchronous / Memory persistence)"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LokiJSAdapter (Synchronous / Memory persistence) can retrieve dbName",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "can retrieve dbName"
        }
      ],
      "endTime": 1728536899244,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\adapters\\lokijs\\test.js",
      "startTime": 1728536897313,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Relation"],
          "duration": 7,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Relation gets id",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "gets id"
        },
        {
          "ancestorTitles": ["Relation"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Relation sets id",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "sets id"
        },
        {
          "ancestorTitles": ["Relation"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Relation sets record",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "sets record"
        },
        {
          "ancestorTitles": ["Relation"],
          "duration": 23,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Relation allows setting id/record only on create/prepareCreate when immutable",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 5,
          "retryReasons": [],
          "status": "passed",
          "title": "allows setting id/record only on create/prepareCreate when immutable"
        },
        {
          "ancestorTitles": ["Relation"],
          "duration": 7,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Relation observers related record",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "observers related record"
        },
        {
          "ancestorTitles": ["Relation"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Relation fetches current record",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "fetches current record"
        },
        {
          "ancestorTitles": ["Relation"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Relation caches observable",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "caches observable"
        },
        {
          "ancestorTitles": ["Relation"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Relation has wmelon tag",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "has wmelon tag"
        }
      ],
      "endTime": 1728536899350,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\Relation\\test.js",
      "startTime": 1728536899084,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["markLocalChangesAsSynced"],
          "duration": 16,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "markLocalChangesAsSynced does nothing for empty local changes",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "does nothing for empty local changes"
        },
        {
          "ancestorTitles": ["markLocalChangesAsSynced"],
          "duration": 9,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "markLocalChangesAsSynced marks local changes as synced",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 6,
          "retryReasons": [],
          "status": "passed",
          "title": "marks local changes as synced"
        },
        {
          "ancestorTitles": ["markLocalChangesAsSynced"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "markLocalChangesAsSynced doesn't modify updated_at timestamps",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "doesn't modify updated_at timestamps"
        },
        {
          "ancestorTitles": ["markLocalChangesAsSynced"],
          "duration": 11,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "markLocalChangesAsSynced doesn't mark as synced records that changed since changes were fetched",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 14,
          "retryReasons": [],
          "status": "passed",
          "title": "doesn't mark as synced records that changed since changes were fetched"
        },
        {
          "ancestorTitles": ["markLocalChangesAsSynced"],
          "duration": 6,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "markLocalChangesAsSynced doesn't mark as synced records in the rejectedIds object",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "doesn't mark as synced records in the rejectedIds object"
        },
        {
          "ancestorTitles": ["markLocalChangesAsSynced"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "markLocalChangesAsSynced can mark records as synced when ids are per-table not globally unique",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "can mark records as synced when ids are per-table not globally unique"
        },
        {
          "ancestorTitles": ["markLocalChangesAsSynced"],
          "duration": null,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "markLocalChangesAsSynced only emits one collection batch change",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "pending",
          "title": "only emits one collection batch change"
        },
        {
          "ancestorTitles": ["markLocalChangesAsSynced"],
          "duration": null,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "markLocalChangesAsSynced doesn't send _status, _changed fields",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "pending",
          "title": "doesn't send _status, _changed fields"
        },
        {
          "ancestorTitles": ["markLocalChangesAsSynced"],
          "duration": null,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "markLocalChangesAsSynced only returns changed fields",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "pending",
          "title": "only returns changed fields"
        }
      ],
      "endTime": 1728536899436,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\sync\\impl\\__tests__\\markAsSynced.test.js",
      "startTime": 1728536899119,
      "status": "focused",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["resolveConflict"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "resolveConflict can resolve per-column conflicts",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "can resolve per-column conflicts"
        },
        {
          "ancestorTitles": ["resolveConflict"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "resolveConflict ignores missing remote columns",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "ignores missing remote columns"
        },
        {
          "ancestorTitles": ["isChangeSetEmpty"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "isChangeSetEmpty empty changeset is empty",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "empty changeset is empty"
        },
        {
          "ancestorTitles": ["isChangeSetEmpty"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "isChangeSetEmpty just one change is enough to dirty the changeset",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "just one change is enough to dirty the changeset"
        },
        {
          "ancestorTitles": ["requiresUpdate"],
          "duration": 8,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "requiresUpdate know how to skip unnecessary updates",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 6,
          "retryReasons": [],
          "status": "passed",
          "title": "know how to skip unnecessary updates"
        }
      ],
      "endTime": 1728536899403,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\sync\\impl\\__tests__\\helpers.test.js",
      "startTime": 1728536899134,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["decorators/json"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "decorators/json deserializes value from JSON",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 6,
          "retryReasons": [],
          "status": "passed",
          "title": "deserializes value from JSON"
        },
        {
          "ancestorTitles": ["decorators/json"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "decorators/json serializes value to JSON",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "serializes value to JSON"
        },
        {
          "ancestorTitles": ["decorators/json"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "decorators/json can memoize deserialized values",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "can memoize deserialized values"
        }
      ],
      "endTime": 1728536899396,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\decorators\\json\\test.js",
      "startTime": 1728536899186,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["subscribeToSimpleQuery"],
          "duration": 39,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "subscribeToSimpleQuery observes changes correctly",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 6,
          "retryReasons": [],
          "status": "passed",
          "title": "observes changes correctly"
        }
      ],
      "endTime": 1728536899432,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\observation\\subscribeToSimpleQuery\\test.js",
      "startTime": 1728536899116,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["synchronize - partial push rejections"],
          "duration": 18,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "synchronize - partial push rejections can partially reject a push",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "can partially reject a push"
        },
        {
          "ancestorTitles": ["synchronize - partial push rejections"],
          "duration": 6,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "synchronize - partial push rejections can partially reject a push and make changes during push",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "can partially reject a push and make changes during push"
        }
      ],
      "endTime": 1728536899427,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\sync\\impl\\__tests__\\synchronize-partialRejections.test.js",
      "startTime": 1728536899162,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["subscribeToQueryReloading"],
          "duration": 13,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "subscribeToQueryReloading observes changes to query",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 10,
          "retryReasons": [],
          "status": "passed",
          "title": "observes changes to query"
        },
        {
          "ancestorTitles": ["subscribeToQueryReloading"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "subscribeToQueryReloading calls observer even if query is empty (regression test)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "calls observer even if query is empty (regression test)"
        }
      ],
      "endTime": 1728536899426,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\observation\\subscribeToQueryReloading\\test.js",
      "startTime": 1728536899144,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["LocalStorage"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LocalStorage implements CRUD operations and stores data as JSON",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 5,
          "retryReasons": [],
          "status": "passed",
          "title": "implements CRUD operations and stores data as JSON"
        },
        {
          "ancestorTitles": ["LocalStorage"],
          "duration": 21,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LocalStorage can store all JSON-safe values",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 20,
          "retryReasons": [],
          "status": "passed",
          "title": "can store all JSON-safe values"
        },
        {
          "ancestorTitles": ["LocalStorage"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LocalStorage oddball values are serialized as expected",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 10,
          "retryReasons": [],
          "status": "passed",
          "title": "oddball values are serialized as expected"
        },
        {
          "ancestorTitles": ["LocalStorage"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "LocalStorage throws if getting/setting invalid values",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 5,
          "retryReasons": [],
          "status": "passed",
          "title": "throws if getting/setting invalid values"
        }
      ],
      "endTime": 1728536899499,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\Database\\LocalStorage\\test.js",
      "startTime": 1728536899230,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Database"],
          "duration": 81,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Database implements get()",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "implements get()"
        },
        {
          "ancestorTitles": ["Database"],
          "duration": 8,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Database implements localStorage",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "implements localStorage"
        },
        {
          "ancestorTitles": ["Database", "unsafeResetDatabase"],
          "duration": 15,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Database unsafeResetDatabase can reset database",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "can reset database"
        },
        {
          "ancestorTitles": ["Database", "unsafeResetDatabase"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Database unsafeResetDatabase throws error if reset is called from outside a writer",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "throws error if reset is called from outside a writer"
        },
        {
          "ancestorTitles": ["Database", "unsafeResetDatabase"],
          "duration": 26,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Database unsafeResetDatabase increments reset count after every reset",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "increments reset count after every reset"
        },
        {
          "ancestorTitles": ["Database", "unsafeResetDatabase"],
          "duration": 47,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Database unsafeResetDatabase prevents Adapter from being called during reset db",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 11,
          "retryReasons": [],
          "status": "passed",
          "title": "prevents Adapter from being called during reset db"
        },
        {
          "ancestorTitles": ["Database", "unsafeResetDatabase"],
          "duration": 140,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Database unsafeResetDatabase Cancels Database experimental subscribers during reset",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 5,
          "retryReasons": [],
          "status": "passed",
          "title": "Cancels Database experimental subscribers during reset"
        },
        {
          "ancestorTitles": ["Database", "unsafeResetDatabase"],
          "duration": null,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Database unsafeResetDatabase Cancels withChangesForTables observation during reset",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "pending",
          "title": "Cancels withChangesForTables observation during reset"
        },
        {
          "ancestorTitles": ["Database", "unsafeResetDatabase"],
          "duration": null,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Database unsafeResetDatabase Cancels Collection change observation during reset",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "pending",
          "title": "Cancels Collection change observation during reset"
        },
        {
          "ancestorTitles": ["Database", "unsafeResetDatabase"],
          "duration": null,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Database unsafeResetDatabase Cancels Collection experimental subscribers during reset",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "pending",
          "title": "Cancels Collection experimental subscribers during reset"
        },
        {
          "ancestorTitles": ["Database", "unsafeResetDatabase"],
          "duration": null,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Database unsafeResetDatabase Cancels Model change observation during reset",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "pending",
          "title": "Cancels Model change observation during reset"
        },
        {
          "ancestorTitles": ["Database", "unsafeResetDatabase"],
          "duration": null,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Database unsafeResetDatabase Cancels Model experimental subscribers during reset",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "pending",
          "title": "Cancels Model experimental subscribers during reset"
        },
        {
          "ancestorTitles": ["Database", "unsafeResetDatabase"],
          "duration": null,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Database unsafeResetDatabase Cancels Query observation during reset",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "pending",
          "title": "Cancels Query observation during reset"
        },
        {
          "ancestorTitles": ["Database", "unsafeResetDatabase"],
          "duration": null,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Database unsafeResetDatabase Cancels Query experimental subscribers during reset",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "pending",
          "title": "Cancels Query experimental subscribers during reset"
        },
        {
          "ancestorTitles": ["Database", "unsafeResetDatabase"],
          "duration": null,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Database unsafeResetDatabase Cancels Relation observation during reset",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "pending",
          "title": "Cancels Relation observation during reset"
        },
        {
          "ancestorTitles": ["Database", "unsafeResetDatabase"],
          "duration": null,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Database unsafeResetDatabase Cancels Relation experimental subscribers during reset",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "pending",
          "title": "Cancels Relation experimental subscribers during reset"
        },
        {
          "ancestorTitles": ["Database", "unsafeResetDatabase"],
          "duration": 13,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Database unsafeResetDatabase Signals internally when database is being reset",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 6,
          "retryReasons": [],
          "status": "passed",
          "title": "Signals internally when database is being reset"
        },
        {
          "ancestorTitles": ["Database", "unsafeResetDatabase"],
          "duration": null,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Database unsafeResetDatabase Disallows <many methods> calls during reset",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "pending",
          "title": "Disallows <many methods> calls during reset"
        },
        {
          "ancestorTitles": ["Database", "unsafeResetDatabase"],
          "duration": null,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Database unsafeResetDatabase Makes old Model objects unsable after reset",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "pending",
          "title": "Makes old Model objects unsable after reset"
        },
        {
          "ancestorTitles": ["Database", "unsafeResetDatabase"],
          "duration": null,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Database unsafeResetDatabase Makes old Query objects unsable after reset",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "pending",
          "title": "Makes old Query objects unsable after reset"
        },
        {
          "ancestorTitles": ["Database", "unsafeResetDatabase"],
          "duration": null,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Database unsafeResetDatabase Makes old Relation objects unsable after reset",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "pending",
          "title": "Makes old Relation objects unsable after reset"
        },
        {
          "ancestorTitles": ["Database", "Database.batch()"],
          "duration": 19,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Database Database.batch() can batch records",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 17,
          "retryReasons": [],
          "status": "passed",
          "title": "can batch records"
        },
        {
          "ancestorTitles": ["Database", "Database.batch()"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Database Database.batch() ignores falsy values passed",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "ignores falsy values passed"
        },
        {
          "ancestorTitles": ["Database", "Database.batch()"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Database Database.batch() can batch with an array passed as argument",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "can batch with an array passed as argument"
        },
        {
          "ancestorTitles": ["Database", "Database.batch()"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Database Database.batch() throws error if attempting to batch records without a pending operation",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "throws error if attempting to batch records without a pending operation"
        },
        {
          "ancestorTitles": ["Database", "Database.batch()"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Database Database.batch() throws error if attempting to batch a disposable record",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "throws error if attempting to batch a disposable record"
        },
        {
          "ancestorTitles": ["Database", "Database.batch()"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Database Database.batch() throws error if batch is called outside of a writer",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "throws error if batch is called outside of a writer"
        },
        {
          "ancestorTitles": ["Database", "Database.batch()"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Database Database.batch() throws an error if invalid arguments",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "throws an error if invalid arguments"
        },
        {
          "ancestorTitles": ["Database", "Database.batch()"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Database Database.batch() prints debug information in verbose mode",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 8,
          "retryReasons": [],
          "status": "passed",
          "title": "prints debug information in verbose mode"
        },
        {
          "ancestorTitles": ["Database", "Observation"],
          "duration": 8,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Database Observation implements withChangesForTables",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 9,
          "retryReasons": [],
          "status": "passed",
          "title": "implements withChangesForTables"
        },
        {
          "ancestorTitles": ["Database", "Observation"],
          "duration": 6,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Database Observation can subscribe to change signals for particular tables",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 11,
          "retryReasons": [],
          "status": "passed",
          "title": "can subscribe to change signals for particular tables"
        },
        {
          "ancestorTitles": ["Database", "Observation"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Database Observation unsubscribe can safely be called more than once",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "unsubscribe can safely be called more than once"
        },
        {
          "ancestorTitles": ["Database", "Observation"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Database Observation can subscribe with the same subscriber multiple times",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "can subscribe with the same subscriber multiple times"
        },
        {
          "ancestorTitles": ["Database", "Observation"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Database Observation has new objects cached before calling subscribers (regression test)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "has new objects cached before calling subscribers (regression test)"
        },
        {
          "ancestorTitles": ["Database", "Database readers/writers"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Database Database readers/writers can execute a writer block",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "can execute a writer block"
        },
        {
          "ancestorTitles": ["Database", "Database readers/writers"],
          "duration": 341,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Database Database readers/writers queues writers/readers",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 9,
          "retryReasons": [],
          "status": "passed",
          "title": "queues writers/readers"
        },
        {
          "ancestorTitles": ["Database", "Database readers/writers"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Database Database readers/writers returns value from reader/writer",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "returns value from reader/writer"
        },
        {
          "ancestorTitles": ["Database", "Database readers/writers"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Database Database readers/writers passes error from reader/writer",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "passes error from reader/writer"
        },
        {
          "ancestorTitles": ["Database", "Database readers/writers"],
          "duration": 351,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Database Database readers/writers can distinguish between writers and readers running",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 5,
          "retryReasons": [],
          "status": "passed",
          "title": "can distinguish between writers and readers running"
        },
        {
          "ancestorTitles": ["Database", "Database readers/writers"],
          "duration": 284,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Database Database readers/writers queues actions correctly even if some error out",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 6,
          "retryReasons": [],
          "status": "passed",
          "title": "queues actions correctly even if some error out"
        },
        {
          "ancestorTitles": ["Database", "Database readers/writers"],
          "duration": 117,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Database Database readers/writers action calling another action directly will get stuck",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "action calling another action directly will get stuck"
        },
        {
          "ancestorTitles": ["Database", "Database readers/writers"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Database Database readers/writers can call readers with callReader",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "can call readers with callReader"
        },
        {
          "ancestorTitles": ["Database", "Database readers/writers"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Database Database readers/writers can call writers with callWriter",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "can call writers with callWriter"
        },
        {
          "ancestorTitles": ["Database", "Database readers/writers"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Database Database readers/writers cannot call writers from readers",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "cannot call writers from readers"
        },
        {
          "ancestorTitles": ["Database", "Database readers/writers"],
          "duration": 126,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Database Database readers/writers sub actions skip the line only once",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "sub actions skip the line only once"
        },
        {
          "ancestorTitles": ["Database", "Database readers/writers"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Database Database readers/writers ensures that callReader/callWriter calls a reader/writer",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "ensures that callReader/callWriter calls a reader/writer"
        },
        {
          "ancestorTitles": ["Database", "Database readers/writers"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Database Database readers/writers can batch from a writer interface",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "can batch from a writer interface"
        },
        {
          "ancestorTitles": ["Database", "Database readers/writers"],
          "duration": 6,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Database Database readers/writers ensures that reader/writer interface is not used after block is done",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "ensures that reader/writer interface is not used after block is done"
        },
        {
          "ancestorTitles": ["Database", "Database readers/writers"],
          "duration": 41,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Database Database readers/writers aborts all pending actions if database is reset",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 6,
          "retryReasons": [],
          "status": "passed",
          "title": "aborts all pending actions if database is reset"
        }
      ],
      "endTime": 1728536899627,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\Database\\test.js",
      "startTime": 1728536893137,
      "status": "focused",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["decorators/nochange"],
          "duration": 7,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "decorators/nochange allows setting values in create()",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 5,
          "retryReasons": [],
          "status": "passed",
          "title": "allows setting values in create()"
        },
        {
          "ancestorTitles": ["decorators/nochange"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "decorators/nochange allows setting value in prepareCreate",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "allows setting value in prepareCreate"
        },
        {
          "ancestorTitles": ["decorators/nochange"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "decorators/nochange throws error if change after create is attempted",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "throws error if change after create is attempted"
        },
        {
          "ancestorTitles": ["decorators/nochange"],
          "duration": 9,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "decorators/nochange fails if applied to incorrect fields",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "fails if applied to incorrect fields"
        }
      ],
      "endTime": 1728536899748,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\decorators\\nochange\\test.js",
      "startTime": 1728536899459,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["CollectionMap"],
          "duration": 7,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "CollectionMap can initialize and get models",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "can initialize and get models"
        },
        {
          "ancestorTitles": ["CollectionMap"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "CollectionMap returns null for collections that don't exist",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "returns null for collections that don't exist"
        },
        {
          "ancestorTitles": ["CollectionMap"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "CollectionMap returns null for naughty table names",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 5,
          "retryReasons": [],
          "status": "passed",
          "title": "returns null for naughty table names"
        },
        {
          "ancestorTitles": ["CollectionMap"],
          "duration": 7,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "CollectionMap collection map is immutable",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "collection map is immutable"
        },
        {
          "ancestorTitles": ["CollectionMap"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "CollectionMap alerts the user of invalid model classes",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "alerts the user of invalid model classes"
        }
      ],
      "endTime": 1728536899793,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\Database\\CollectionMap\\test.js",
      "startTime": 1728536899488,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["decorators/timestamp"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "decorators/timestamp returns timestamps cast to Date",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "returns timestamps cast to Date"
        },
        {
          "ancestorTitles": ["decorators/timestamp"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "decorators/timestamp returns null if raw field is null",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "returns null if raw field is null"
        },
        {
          "ancestorTitles": ["decorators/timestamp"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "decorators/timestamp sets timestamps cast from dates",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "sets timestamps cast from dates"
        },
        {
          "ancestorTitles": ["decorators/timestamp"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "decorators/timestamp sets null if passed",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "sets null if passed"
        },
        {
          "ancestorTitles": ["decorators/timestamp"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "decorators/timestamp returns 1970 date, not null if timestamp=0",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "returns 1970 date, not null if timestamp=0"
        },
        {
          "ancestorTitles": ["decorators/timestamp"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "decorators/timestamp sets 1970 date, not null if timestamp",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "sets 1970 date, not null if timestamp"
        },
        {
          "ancestorTitles": ["decorators/timestamp"],
          "duration": 15,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "decorators/timestamp fails if applied to incorrect fields",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "fails if applied to incorrect fields"
        },
        {
          "ancestorTitles": ["decorators/timestamp"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "decorators/timestamp returns a instance of date if cached",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "returns a instance of date if cached"
        }
      ],
      "endTime": 1728536899801,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\decorators\\date\\test.js",
      "startTime": 1728536899476,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["decorators/text"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "decorators/text trims strings when setting",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "trims strings when setting"
        },
        {
          "ancestorTitles": ["decorators/text"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "decorators/text converts non-strings to null",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 9,
          "retryReasons": [],
          "status": "passed",
          "title": "converts non-strings to null"
        },
        {
          "ancestorTitles": ["decorators/text"],
          "duration": 11,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "decorators/text fails if applied to incorrect fields",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "fails if applied to incorrect fields"
        }
      ],
      "endTime": 1728536899808,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\decorators\\text\\test.js",
      "startTime": 1728536899530,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["@writer"],
          "duration": 7,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "@writer calls db.writer() and passes arguments correctly",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "calls db.writer() and passes arguments correctly"
        },
        {
          "ancestorTitles": ["@writer"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "@writer can call subactions using this.callReader/callWriter",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "can call subactions using this.callReader/callWriter"
        },
        {
          "ancestorTitles": ["@writer"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "@writer works with arbitrary classes",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "works with arbitrary classes"
        }
      ],
      "endTime": 1728536899817,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\decorators\\action\\test.js",
      "startTime": 1728536899496,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["decorators/field"],
          "duration": 9,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "decorators/field delegates accesses to _getRaw/_setRaw",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 5,
          "retryReasons": [],
          "status": "passed",
          "title": "delegates accesses to _getRaw/_setRaw"
        },
        {
          "ancestorTitles": ["decorators/field"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "decorators/field works with arbitrary objects with asModel",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "works with arbitrary objects with asModel"
        },
        {
          "ancestorTitles": ["decorators/field"],
          "duration": 13,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "decorators/field fails if applied to incorrect fields",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 5,
          "retryReasons": [],
          "status": "passed",
          "title": "fails if applied to incorrect fields"
        }
      ],
      "endTime": 1728536899845,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\decorators\\field\\test.js",
      "startTime": 1728536899524,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["decorators/immutableRelation"],
          "duration": 7,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "decorators/immutableRelation creates immutable Relation object",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "creates immutable Relation object"
        }
      ],
      "endTime": 1728536899833,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\decorators\\immutableRelation\\test.js",
      "startTime": 1728536899511,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["subscribeToCount"],
          "duration": 15,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "subscribeToCount observes changes to count",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 12,
          "retryReasons": [],
          "status": "passed",
          "title": "observes changes to count"
        }
      ],
      "endTime": 1728536899868,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\observation\\subscribeToCount\\test.js",
      "startTime": 1728536899450,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["performJoins"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "performJoins returns simple queries as is",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "returns simple queries as is"
        },
        {
          "ancestorTitles": ["performJoins"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "performJoins performs JOIN queries",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 5,
          "retryReasons": [],
          "status": "passed",
          "title": "performs JOIN queries"
        },
        {
          "ancestorTitles": ["performJoins"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "performJoins performs on()s nested inside AND/ORs",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "performs on()s nested inside AND/ORs"
        },
        {
          "ancestorTitles": ["performJoins"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "performJoins performs Q.on nested inside Q.on",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "performs Q.on nested inside Q.on"
        }
      ],
      "endTime": 1728536899868,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\adapters\\lokijs\\worker\\performJoins\\test.js",
      "startTime": 1728536899656,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["randomId"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "randomId generates a random string",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "generates a random string"
        },
        {
          "ancestorTitles": ["randomId"],
          "duration": 85,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "randomId always generates a valid id",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 500,
          "retryReasons": [],
          "status": "passed",
          "title": "always generates a valid id"
        },
        {
          "ancestorTitles": ["randomId"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "randomId allows to override the generator function",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "allows to override the generator function"
        }
      ],
      "endTime": 1728536900057,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\utils\\common\\randomId\\test.js",
      "startTime": 1728536899880,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["encodeInsertSql"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "encodeInsertSql encodes insert for a table",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "encodes insert for a table"
        },
        {
          "ancestorTitles": ["encodeUpdateSql"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "encodeUpdateSql encodes update for a table",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "encodes update for a table"
        },
        {
          "ancestorTitles": ["encodeInsertArgs"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "encodeInsertArgs encodes sql args for the insert query",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "encodes sql args for the insert query"
        },
        {
          "ancestorTitles": ["encodeUpdateArgs"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "encodeUpdateArgs encodes sql args for the update query",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "encodes sql args for the update query"
        },
        {
          "ancestorTitles": ["groupOperations"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "groupOperations can group operations by type and table",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "can group operations by type and table"
        },
        {
          "ancestorTitles": ["encodeBatch"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "encodeBatch can encode a native batch",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "can encode a native batch"
        },
        {
          "ancestorTitles": ["encodeBatch"],
          "duration": 51,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "encodeBatch can recreate indices for large batches",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "can recreate indices for large batches"
        }
      ],
      "endTime": 1728536900035,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\adapters\\sqlite\\encodeBatch\\test.js",
      "startTime": 1728536899891,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["sanitizedRaw()"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "sanitizedRaw() can sanitize the whole raw",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "can sanitize the whole raw"
        },
        {
          "ancestorTitles": ["sanitizedRaw()"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "sanitizedRaw() can create a valid raw from nothin'",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "can create a valid raw from nothin'"
        },
        {
          "ancestorTitles": ["sanitizedRaw()"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "sanitizedRaw() sanitizes id, _status, _changed",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 8,
          "retryReasons": [],
          "status": "passed",
          "title": "sanitizes id, _status, _changed"
        },
        {
          "ancestorTitles": ["sanitizedRaw()"],
          "duration": 39,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "sanitizedRaw() is safe against __proto__ tricks",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 8,
          "retryReasons": [],
          "status": "passed",
          "title": "is safe against __proto__ tricks"
        },
        {
          "ancestorTitles": ["setRawSanitized()"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "setRawSanitized() can set one value on a sanitized raw",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 7,
          "retryReasons": [],
          "status": "passed",
          "title": "can set one value on a sanitized raw"
        },
        {
          "ancestorTitles": ["setRawSanitized()"],
          "duration": 16,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "setRawSanitized() can sanitize every value correctly",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 150,
          "retryReasons": [],
          "status": "passed",
          "title": "can sanitize every value correctly"
        },
        {
          "ancestorTitles": ["nullValue()"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "nullValue() can return null value for any column schema",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 6,
          "retryReasons": [],
          "status": "passed",
          "title": "can return null value for any column schema"
        }
      ],
      "endTime": 1728536900062,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\RawRecord\\__tests__\\test.js",
      "startTime": 1728536899903,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Schema"],
          "duration": 11,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Schema can prepare schema",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "can prepare schema"
        },
        {
          "ancestorTitles": ["Schema"],
          "duration": 18,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Schema can define last_modified in user land",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "can define last_modified in user land"
        },
        {
          "ancestorTitles": ["Schema"],
          "duration": 31,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Schema does not allow unsafe names",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 32,
          "retryReasons": [],
          "status": "passed",
          "title": "does not allow unsafe names"
        }
      ],
      "endTime": 1728536900058,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\Schema\\test.js",
      "startTime": 1728536899909,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["checkName"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "checkName returns safe names as-is",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "returns safe names as-is"
        },
        {
          "ancestorTitles": ["checkName"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "checkName keeps returning a safe name as is",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "keeps returning a safe name as is"
        },
        {
          "ancestorTitles": ["checkName"],
          "duration": 52,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "checkName does not allow unsafe names",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 44,
          "retryReasons": [],
          "status": "passed",
          "title": "does not allow unsafe names"
        }
      ],
      "endTime": 1728536900081,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\utils\\fp\\checkName\\test.js",
      "startTime": 1728536899929,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["forEachAsync"],
          "duration": 39,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "forEachAsync works correctly",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "works correctly"
        }
      ],
      "endTime": 1728536900079,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\utils\\fp\\forEachAsync\\test.js",
      "startTime": 1728536899937,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 98,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) validates adapter options",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 7,
          "retryReasons": [],
          "status": "passed",
          "title": "validates adapter options"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 6,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) can query and count on empty db",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "can query and count on empty db"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 11,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) can create and find records (sanity test)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "can create and find records (sanity test)"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 11,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) can find records by ID",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 5,
          "retryReasons": [],
          "status": "passed",
          "title": "can find records by ID"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 6,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) can cache non-global IDs on find",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 5,
          "retryReasons": [],
          "status": "passed",
          "title": "can cache non-global IDs on find"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 11,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) can cache non-global IDs on query",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 5,
          "retryReasons": [],
          "status": "passed",
          "title": "can cache non-global IDs on query"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) sanitizes records on find",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "sanitizes records on find"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 11,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) can query and count records",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 9,
          "retryReasons": [],
          "status": "passed",
          "title": "can query and count records"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 11,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) compacts query results",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 7,
          "retryReasons": [],
          "status": "passed",
          "title": "compacts query results"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) sanitizes records on query",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "sanitizes records on query"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 7,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) returns a COPY of the data",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 5,
          "retryReasons": [],
          "status": "passed",
          "title": "returns a COPY of the data"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 9,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) can query record IDs",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "can query record IDs"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 6,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) can unsafely query raws with SQL",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "can unsafely query raws with SQL"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) can update records",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "can update records"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) can mark records as deleted",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "can mark records as deleted"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) can destroy records permanently",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "can destroy records permanently"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) can destroy permanently records already destroyed",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "can destroy permanently records already destroyed"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 14,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) can get deleted record ids",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "can get deleted record ids"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 8,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) can destroy deleted records",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "can destroy deleted records"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) destroyDeletedRecords can handle unsafe strings",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "destroyDeletedRecords can handle unsafe strings"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) can run mixed batches",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 6,
          "retryReasons": [],
          "status": "passed",
          "title": "can run mixed batches"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 6,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) batches are transactional",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "batches are transactional"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) can run sync-like flow",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "can run sync-like flow"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 8,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) can unsafely load from sync JSON",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "can unsafely load from sync JSON"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) can return residual JSON from sync JSON",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "can return residual JSON from sync JSON"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) destroys provided jsons after being used",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "destroys provided jsons after being used"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 10,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) can unsafely reset database",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "can unsafely reset database"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 12,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) queues actions correctly",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 10,
          "retryReasons": [],
          "status": "passed",
          "title": "queues actions correctly"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) fails on bad queries, creates, updates, deletes",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "fails on bad queries, creates, updates, deletes"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) can unsafely execute raw commands",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "can unsafely execute raw commands"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 6,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) supports LocalStorage",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 6,
          "retryReasons": [],
          "status": "passed",
          "title": "supports LocalStorage"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) only supports strings as LocalStorage values",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 7,
          "retryReasons": [],
          "status": "passed",
          "title": "only supports strings as LocalStorage values"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 153,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) supports naughty strings in LocalStorage",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 529,
          "retryReasons": [],
          "status": "passed",
          "title": "supports naughty strings in LocalStorage"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 16,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) does not fail on (weirdly named) table named that are SQLite keywords",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "does not fail on (weirdly named) table named that are SQLite keywords"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 8,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) fails quickly on non-existing table names",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 9,
          "retryReasons": [],
          "status": "passed",
          "title": "fails quickly on non-existing table names"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 13,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) migrates database between versions",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 14,
          "retryReasons": [],
          "status": "passed",
          "title": "migrates database between versions"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 10,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) migrations: renameColumn",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 9,
          "retryReasons": [],
          "status": "passed",
          "title": "migrations: renameColumn"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 10,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) migrations: destroyColumn",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 8,
          "retryReasons": [],
          "status": "passed",
          "title": "migrations: destroyColumn"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 14,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) migrations: renameColumn&destroyColumn (complex)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "migrations: renameColumn&destroyColumn (complex)"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 13,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) migrations: destroyTable",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "migrations: destroyTable"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 9,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) can perform empty migrations (regression test)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "can perform empty migrations (regression test)"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 15,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) resets database when it's newer than app schema",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "resets database when it's newer than app schema"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 7,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) resets database when there are no available migrations",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "resets database when there are no available migrations"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) errors when migration fails",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "errors when migration fails"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 6,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] matches everything",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches everything"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] matches strings",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches strings"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 9,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] matches `true`",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches `true`"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] matches `false`",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches `false`"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] matches `null`",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches `null`"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] matches integers (0)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches integers (0)"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] matches integers (1)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches integers (1)"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 9,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] matches floats",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches floats"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 8,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] matches big numbers (e.g. JS timestamps)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches big numbers (e.g. JS timestamps)"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] matches multiple conditions",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches multiple conditions"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 7,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] matches by greater-than",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches by greater-than"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 6,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] matches by greater-than-or-equal",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches by greater-than-or-equal"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] matches by greater-than with JS-like semantics",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches by greater-than with JS-like semantics"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] matches by less-than",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches by less-than"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] matches by less-than-or-equal",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches by less-than-or-equal"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] matches by not-equal",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches by not-equal"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 6,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] matches not-equal(null)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches not-equal(null)"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 10,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] matches by IN",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches by IN"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] matches by NOT IN",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches by NOT IN"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] matches by BETWEEN",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches by BETWEEN"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 7,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] can compare columns (eq)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] can compare columns (eq)"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] can compare columns (notEq)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] can compare columns (notEq)"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] can compare columns (less-than)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] can compare columns (less-than)"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] can compare columns (less-than-or-equal)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] can compare columns (less-than-or-equal)"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 10,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] can compare columns (greater-than/float)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] can compare columns (greater-than/float)"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 6,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] can compare columns (greater-than-or-equal/integer)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] can compare columns (greater-than-or-equal/integer)"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] can compare columns (string/null)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] can compare columns (string/null)"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] can compare columns (greater-than with JS semantics)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] can compare columns (greater-than with JS semantics)"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] matches complex queries with AND/OR nesting",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches complex queries with AND/OR nesting"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] can match by less-than with JS semantics",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] can match by less-than with JS semantics"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] can match by NOT IN with JS semantics",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] can match by NOT IN with JS semantics"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 6,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] matches like (string)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches like (string)"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] matches notLike (string)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches notLike (string)"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] matches like (value%)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches like (value%)"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] matches notLike (value%)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches notLike (value%)"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] matches like (%value)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches like (%value)"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] matches notLike (%value)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches notLike (%value)"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] matches like (value%value)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches like (value%value)"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] matches notLike (value%value)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches notLike (value%value)"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] matches like (value%value%)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches like (value%value%)"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] matches notLike (value%value%)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches notLike (value%value%)"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] matches like (v_lue%v_lue%)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches like (v_lue%v_lue%)"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] matches notLike (v_lue%v_lue%)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches notLike (v_lue%v_lue%)"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] matches like (_alu_)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches like (_alu_)"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] matches like sanitized (value%)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches like sanitized (value%)"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] matches like sanitized (value_)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches like sanitized (value_)"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] matches like sanitized (value.*)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches like sanitized (value.*)"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] matches like sanitized (%(value,)%)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches like sanitized (%(value,)%)"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] matches includes(foo)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches includes(foo)"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] matches includes()",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches includes()"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 6,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] matches unsafe SQL expression",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches unsafe SQL expression"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] matches unsafe SQL query",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches unsafe SQL query"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 8,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] matches unsafe SQL query with values",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches unsafe SQL query with values"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] can count with unsafe SQL query with values",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] can count with unsafe SQL query with values"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] matches unsafe Loki expression",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches unsafe Loki expression"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 8,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] sorts results by string",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] sorts results by string"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] sorts results by string, descending",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] sorts results by string, descending"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] sorts results by number",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] sorts results by number"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] sorts results by boolean",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] sorts results by boolean"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 8,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] sorts results by multiple columns",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] sorts results by multiple columns"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] matches with sortBy & take",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches with sortBy & take"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] matches with sortBy, take & skip",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] matches with sortBy, take & skip"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 8,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared join test] can perform simple JOIN queries",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared join test] can perform simple JOIN queries"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 7,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared join test] can perform complex JOIN queries",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared join test] can perform complex JOIN queries"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 15,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared join test] can perform Q.on with subexpressions",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared join test] can perform Q.on with subexpressions"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared join test] can perform Q.on's nested in Q.or and Q.and",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared join test] can perform Q.on's nested in Q.or and Q.and"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared join test] can perform Q.on's nested in Q.on",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared join test] can perform Q.on's nested in Q.on"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 6,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared join test] can perform deeply nested Q.ons",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared join test] can perform deeply nested Q.ons"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared join test] can perform both JOIN queries and column comparisons",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared join test] can perform both JOIN queries and column comparisons"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared join test] can perform a JOIN query containing column comparison",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared join test] can perform a JOIN query containing column comparison"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared join test] can perform a JOIN query containing weakGt column comparison",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared join test] can perform a JOIN query containing weakGt column comparison"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared join test] can perform a JOIN query on has_many collection with column comparisons",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared join test] can perform a JOIN query on has_many collection with column comparisons"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared join test] can perform deeply nested JOIN query with a column comparison",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared join test] can perform deeply nested JOIN query with a column comparison"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared join test] can compare columns between tables using unsafe SQL expressions",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared join test] can compare columns between tables using unsafe SQL expressions"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 8,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared join test] can compare columns between tables using unsafe SQL queries",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared join test] can compare columns between tables using unsafe SQL queries"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared join test] can compare columns between tables using unsafe Loki transform",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared join test] can compare columns between tables using unsafe Loki transform"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 697,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) [shared match test] can match strings from big-list-of-naughty-strings",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1587,
          "retryReasons": [],
          "status": "passed",
          "title": "[shared match test] can match strings from big-list-of-naughty-strings"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) can store and retrieve large numbers (regression test)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "can store and retrieve large numbers (regression test)"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 149,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) can store and retrieve naughty strings exactly",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1058,
          "retryReasons": [],
          "status": "passed",
          "title": "can store and retrieve naughty strings exactly"
        },
        {
          "ancestorTitles": ["SQLiteAdapterNode (Asynchronous/Memory)"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLiteAdapterNode (Asynchronous/Memory) can retrieve dbName",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "can retrieve dbName"
        }
      ],
      "endTime": 1728536900094,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\adapters\\sqlite\\test.js",
      "startTime": 1728536897273,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["NodeJS DatabaseDriver"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "NodeJS DatabaseDriver getPath will add extension for foo",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "getPath will add extension for foo"
        },
        {
          "ancestorTitles": ["NodeJS DatabaseDriver"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "NodeJS DatabaseDriver getPath will add extension for file:foo",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "getPath will add extension for file:foo"
        },
        {
          "ancestorTitles": ["NodeJS DatabaseDriver"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "NodeJS DatabaseDriver getPath will add extension for /path/foo",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "getPath will add extension for /path/foo"
        },
        {
          "ancestorTitles": ["NodeJS DatabaseDriver"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "NodeJS DatabaseDriver getPath will add extension for foo.sqlite",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "getPath will add extension for foo.sqlite"
        },
        {
          "ancestorTitles": ["NodeJS DatabaseDriver"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "NodeJS DatabaseDriver getPath will add extension for foo?mode=memory",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "getPath will add extension for foo?mode=memory"
        },
        {
          "ancestorTitles": ["NodeJS DatabaseDriver"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "NodeJS DatabaseDriver getPath will add extension for file:foo?mode=memory",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "getPath will add extension for file:foo?mode=memory"
        },
        {
          "ancestorTitles": ["NodeJS DatabaseDriver"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "NodeJS DatabaseDriver getPath will add extension for /path/foo?mode=memory",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "getPath will add extension for /path/foo?mode=memory"
        },
        {
          "ancestorTitles": ["NodeJS DatabaseDriver"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "NodeJS DatabaseDriver getPath will add extension for foo.sqlite?mode=memory",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "getPath will add extension for foo.sqlite?mode=memory"
        },
        {
          "ancestorTitles": ["NodeJS DatabaseDriver"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "NodeJS DatabaseDriver getPath will add extension for foo?bar=baz",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "getPath will add extension for foo?bar=baz"
        },
        {
          "ancestorTitles": ["NodeJS DatabaseDriver"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "NodeJS DatabaseDriver getPath will add extension for file:foo?bar=baz",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "getPath will add extension for file:foo?bar=baz"
        },
        {
          "ancestorTitles": ["NodeJS DatabaseDriver"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "NodeJS DatabaseDriver getPath will add extension for /path/foo?bar=baz",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "getPath will add extension for /path/foo?bar=baz"
        },
        {
          "ancestorTitles": ["NodeJS DatabaseDriver"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "NodeJS DatabaseDriver getPath will add extension for foo.sqlite?bar=baz",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "getPath will add extension for foo.sqlite?bar=baz"
        },
        {
          "ancestorTitles": ["NodeJS DatabaseDriver"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "NodeJS DatabaseDriver getPath will not add extension for :memory:",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "getPath will not add extension for :memory:"
        },
        {
          "ancestorTitles": ["NodeJS DatabaseDriver"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "NodeJS DatabaseDriver getPath will not add extension for file::memory:",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "getPath will not add extension for file::memory:"
        }
      ],
      "endTime": 1728536900101,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\adapters\\sqlite\\sqlite-node\\__tests__\\DatabaseDriver.test.js",
      "startTime": 1728536899919,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["queryWithoutDeleted"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "queryWithoutDeleted builds empty query without deleted",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "builds empty query without deleted"
        },
        {
          "ancestorTitles": ["queryWithoutDeleted"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "queryWithoutDeleted builds simple query without deleted",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "builds simple query without deleted"
        },
        {
          "ancestorTitles": ["queryWithoutDeleted"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "queryWithoutDeleted supports simple 2 JOIN queries on one table and JOIN query on another without deleted",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "supports simple 2 JOIN queries on one table and JOIN query on another without deleted"
        },
        {
          "ancestorTitles": ["queryWithoutDeleted"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "queryWithoutDeleted supports nested Q.ons",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "supports nested Q.ons"
        },
        {
          "ancestorTitles": ["queryWithoutDeleted"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "queryWithoutDeleted supports Q.ons on Q.on",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "supports Q.ons on Q.on"
        }
      ],
      "endTime": 1728536900103,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\QueryDescription\\__tests__\\queryWithoutDeleted.test.js",
      "startTime": 1728536899956,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["decorators/children"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "decorators/children fetches children of a model",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "fetches children of a model"
        },
        {
          "ancestorTitles": ["decorators/children"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "decorators/children works on arbitrary objects with asModel",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "works on arbitrary objects with asModel"
        },
        {
          "ancestorTitles": ["decorators/children"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "decorators/children throws error if set is attempted",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "throws error if set is attempted"
        },
        {
          "ancestorTitles": ["decorators/children"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "decorators/children caches created Query",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "caches created Query"
        }
      ],
      "endTime": 1728536900128,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\decorators\\children\\test.js",
      "startTime": 1728536899873,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["SharedSubscribable"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SharedSubscribable allows a subscription to be passed through",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 14,
          "retryReasons": [],
          "status": "passed",
          "title": "allows a subscription to be passed through"
        },
        {
          "ancestorTitles": ["SharedSubscribable"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SharedSubscribable can multicast to multiple subscribers",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 15,
          "retryReasons": [],
          "status": "passed",
          "title": "can multicast to multiple subscribers"
        },
        {
          "ancestorTitles": ["SharedSubscribable"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SharedSubscribable reemits last value to new subscribers, if any",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 9,
          "retryReasons": [],
          "status": "passed",
          "title": "reemits last value to new subscribers, if any"
        },
        {
          "ancestorTitles": ["SharedSubscribable"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SharedSubscribable source can notify subscriber synchronously with subscription",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 7,
          "retryReasons": [],
          "status": "passed",
          "title": "source can notify subscriber synchronously with subscription"
        },
        {
          "ancestorTitles": ["SharedSubscribable"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SharedSubscribable can resubscribe to source",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 7,
          "retryReasons": [],
          "status": "passed",
          "title": "can resubscribe to source"
        },
        {
          "ancestorTitles": ["SharedSubscribable"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SharedSubscribable too many calls to unsubscribe are safe",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 7,
          "retryReasons": [],
          "status": "passed",
          "title": "too many calls to unsubscribe are safe"
        },
        {
          "ancestorTitles": ["SharedSubscribable"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SharedSubscribable can subscribe with the same subscriber multiple times",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "can subscribe with the same subscriber multiple times"
        },
        {
          "ancestorTitles": ["SharedSubscribable"],
          "duration": 14,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SharedSubscribable proteccs from rogue sources notifying after being unsubscribed from",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "proteccs from rogue sources notifying after being unsubscribed from"
        }
      ],
      "endTime": 1728536900197,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\utils\\subscriptions\\SharedSubscribable\\test.js",
      "startTime": 1728536900082,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["addToRawSet"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "addToRawSet transforms raw set",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 5,
          "retryReasons": [],
          "status": "passed",
          "title": "transforms raw set"
        },
        {
          "ancestorTitles": ["setRawColumnChange"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "setRawColumnChange adds to _changed if needed",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "adds to _changed if needed"
        }
      ],
      "endTime": 1728536900189,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\sync\\helpers.test.js",
      "startTime": 1728536900112,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["encodeSchema"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "encodeSchema encodes schema",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "encodes schema"
        },
        {
          "ancestorTitles": ["encodeSchema"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "encodeSchema encodes schema with unsafe SQL",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "encodes schema with unsafe SQL"
        },
        {
          "ancestorTitles": ["encodeIndices"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "encodeIndices encodes creation of indices",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "encodes creation of indices"
        },
        {
          "ancestorTitles": ["encodeIndices"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "encodeIndices encodes removal of indices",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "encodes removal of indices"
        },
        {
          "ancestorTitles": ["encodeIndices"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "encodeIndices encodes creation of indices with unsafe sql",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "encodes creation of indices with unsafe sql"
        },
        {
          "ancestorTitles": ["encodeIndices"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "encodeIndices encodes removal of indices with unsafe sql",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "encodes removal of indices with unsafe sql"
        },
        {
          "ancestorTitles": ["encodeMigrationSteps"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "encodeMigrationSteps encodes migrations",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "encodes migrations"
        },
        {
          "ancestorTitles": ["encodeMigrationSteps"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "encodeMigrationSteps encodes migrations with unsafe SQL",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "encodes migrations with unsafe SQL"
        }
      ],
      "endTime": 1728536900207,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\adapters\\sqlite\\encodeSchema\\test.js",
      "startTime": 1728536900093,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["allPromisesObj"],
          "duration": 17,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "allPromisesObj works correctly",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "works correctly"
        }
      ],
      "endTime": 1728536900232,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\utils\\fp\\allPromisesObj\\test.js",
      "startTime": 1728536900132,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["anyPass"],
          "duration": 6,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "anyPass works correctly",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 9,
          "retryReasons": [],
          "status": "passed",
          "title": "works correctly"
        }
      ],
      "endTime": 1728536900227,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\utils\\fp\\anyPass\\test.js",
      "startTime": 1728536900149,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["SQLite encodeValue"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeValue encodes SQLite values",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 6,
          "retryReasons": [],
          "status": "passed",
          "title": "encodes SQLite values"
        },
        {
          "ancestorTitles": ["SQLite encodeValue"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SQLite encodeValue catches invalid values",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 5,
          "retryReasons": [],
          "status": "passed",
          "title": "catches invalid values"
        }
      ],
      "endTime": 1728536900231,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\adapters\\sqlite\\encodeValue\\test.js",
      "startTime": 1728536900142,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["withObservables"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "withObservables should hoist non react statics",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should hoist non react statics"
        }
      ],
      "endTime": 1728536900233,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\react\\withObservables\\withObservables.test.js",
      "startTime": 1728536900127,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["decodeQueryResult"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "decodeQueryResult decodes query result",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 5,
          "retryReasons": [],
          "status": "passed",
          "title": "decodes query result"
        }
      ],
      "endTime": 1728536900368,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\adapters\\sqlite\\makeDispatcher\\decodeQueryResult\\test.js",
      "startTime": 1728536900276,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["deepFreeze"],
          "duration": 9,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "deepFreeze can deep freeze an object",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 7,
          "retryReasons": [],
          "status": "passed",
          "title": "can deep freeze an object"
        }
      ],
      "endTime": 1728536900378,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\utils\\common\\deepFreeze\\test.js",
      "startTime": 1728536900291,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["keys"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "keys works correctly",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "works correctly"
        }
      ],
      "endTime": 1728536900386,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\utils\\fp\\keys\\test.js",
      "startTime": 1728536900297,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["fromArrayOrSpread"],
          "duration": 13,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "fromArrayOrSpread can return args from array or spread",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 5,
          "retryReasons": [],
          "status": "passed",
          "title": "can return args from array or spread"
        }
      ],
      "endTime": 1728536900411,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\utils\\fp\\arrayOrSpread\\test.js",
      "startTime": 1728536900303,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["shallowCloneDeepObjects"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "shallowCloneDeepObjects shallow clones deep objects",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 5,
          "retryReasons": [],
          "status": "passed",
          "title": "shallow clones deep objects"
        }
      ],
      "endTime": 1728536900401,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\adapters\\lokijs\\worker\\cloneMessage\\test.js",
      "startTime": 1728536900326,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["ensureSync"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "ensureSync passes values through",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "passes values through"
        },
        {
          "ancestorTitles": ["ensureSync"],
          "duration": 9,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "ensureSync throws an error if Promise is returned",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "throws an error if Promise is returned"
        }
      ],
      "endTime": 1728536900413,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\utils\\common\\ensureSync\\test.js",
      "startTime": 1728536900318,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["mapObj"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "mapObj works correctly",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "works correctly"
        }
      ],
      "endTime": 1728536900438,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\utils\\fp\\mapObj\\test.js",
      "startTime": 1728536900352,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["decorators/lazy"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "decorators/lazy calculates value on first evaluation only",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 10,
          "retryReasons": [],
          "status": "passed",
          "title": "calculates value on first evaluation only"
        }
      ],
      "endTime": 1728536900448,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\decorators\\lazy\\test.js",
      "startTime": 1728536900365,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["sortBy"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "sortBy works correctly",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 5,
          "retryReasons": [],
          "status": "passed",
          "title": "works correctly"
        },
        {
          "ancestorTitles": ["sortBy"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "sortBy does not mutate",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "does not mutate"
        }
      ],
      "endTime": 1728536900470,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\utils\\fp\\sortBy\\test.js",
      "startTime": 1728536900380,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["pipe"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "pipe works correctly",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 5,
          "retryReasons": [],
          "status": "passed",
          "title": "works correctly"
        }
      ],
      "endTime": 1728536900471,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\utils\\fp\\pipe\\test.js",
      "startTime": 1728536900393,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["filterObj"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "filterObj works correctly",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "works correctly"
        }
      ],
      "endTime": 1728536900498,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\utils\\fp\\filterObj\\test.js",
      "startTime": 1728536900404,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["groupBy"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "groupBy works correctly",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "works correctly"
        }
      ],
      "endTime": 1728536900511,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\utils\\fp\\groupBy\\test.js",
      "startTime": 1728536900411,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["identicalArrays"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "identicalArrays checks if arrays have identical contents",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 8,
          "retryReasons": [],
          "status": "passed",
          "title": "checks if arrays have identical contents"
        }
      ],
      "endTime": 1728536900520,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\utils\\fp\\identicalArrays\\test.js",
      "startTime": 1728536900430,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["areRecordsEqual"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "areRecordsEqual works correctly",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 10,
          "retryReasons": [],
          "status": "passed",
          "title": "works correctly"
        }
      ],
      "endTime": 1728536900531,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\utils\\fp\\areRecordsEqual\\test.js",
      "startTime": 1728536900421,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["SyncLogger"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SyncLogger allows to make and read logs",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "allows to make and read logs"
        },
        {
          "ancestorTitles": ["SyncLogger"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SyncLogger censors logs properly",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "censors logs properly"
        },
        {
          "ancestorTitles": ["SyncLogger"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SyncLogger returns formatted logs",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "returns formatted logs"
        },
        {
          "ancestorTitles": ["SyncLogger"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SyncLogger Respects the log limit",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "Respects the log limit"
        }
      ],
      "endTime": 1728536900562,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\sync\\SyncLogger\\test.js",
      "startTime": 1728536900446,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["values"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "values works correctly",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "works correctly"
        }
      ],
      "endTime": 1728536900566,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\utils\\fp\\values\\test.js",
      "startTime": 1728536900460,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["arrayDifference"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "arrayDifference checks for differences between arrays",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 5,
          "retryReasons": [],
          "status": "passed",
          "title": "checks for differences between arrays"
        },
        {
          "ancestorTitles": ["arrayDifference"],
          "duration": 7,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "arrayDifference checks for differences between arrays of ints",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 7,
          "retryReasons": [],
          "status": "passed",
          "title": "checks for differences between arrays of ints"
        },
        {
          "ancestorTitles": ["arrayDifference"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "arrayDifference checks for differences between arrays of strings",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 5,
          "retryReasons": [],
          "status": "passed",
          "title": "checks for differences between arrays of strings"
        },
        {
          "ancestorTitles": ["arrayDifference"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "arrayDifference checks for differences between arrays of objects",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 8,
          "retryReasons": [],
          "status": "passed",
          "title": "checks for differences between arrays of objects"
        }
      ],
      "endTime": 1728536900580,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\utils\\fp\\arrayDifference\\test.js",
      "startTime": 1728536900484,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["allPass"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "allPass works correctly",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 11,
          "retryReasons": [],
          "status": "passed",
          "title": "works correctly"
        }
      ],
      "endTime": 1728536900580,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\utils\\fp\\allPass\\test.js",
      "startTime": 1728536900497,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["unique"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "unique returns a list of unique elements, by identity",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "returns a list of unique elements, by identity"
        }
      ],
      "endTime": 1728536900606,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\utils\\fp\\unique\\test.js",
      "startTime": 1728536900531,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["isObj"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "isObj checks for objects correctly",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 14,
          "retryReasons": [],
          "status": "passed",
          "title": "checks for objects correctly"
        }
      ],
      "endTime": 1728536900615,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\utils\\fp\\isObj\\test.js",
      "startTime": 1728536900544,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["splitEvery"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "splitEvery works correctly",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 7,
          "retryReasons": [],
          "status": "passed",
          "title": "works correctly"
        }
      ],
      "endTime": 1728536900617,
      "message": "",
      "name": "C:\\Users\\johan\\Projects\\WatermelonDB\\src\\utils\\fp\\splitEvery\\test.js",
      "startTime": 1728536900554,
      "status": "passed",
      "summary": ""
    }
  ],
  "wasInterrupted": false
}
